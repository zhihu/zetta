// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hbase

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"reflect"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Text []byte

func TextPtr(v Text) *Text { return &v }

type Bytes []byte

func BytesPtr(v Bytes) *Bytes { return &v }

type ScannerID int32

func ScannerIDPtr(v ScannerID) *ScannerID { return &v }

// TCell - Used to transport a cell value (byte[]) and the timestamp it was
// stored with together as a result for get and getRow methods. This promotes
// the timestamp of a cell to a first-class value, making it easy to take
// note of temporal data. Cell is used all the way from HStore up to HTable.
//
// Attributes:
//  - Value
//  - Timestamp
type TCell struct {
	Value     Bytes `thrift:"value,1" db:"value" json:"value"`
	Timestamp int64 `thrift:"timestamp,2" db:"timestamp" json:"timestamp"`
}

func NewTCell() *TCell {
	return &TCell{}
}

func (p *TCell) GetValue() Bytes {
	return p.Value
}

func (p *TCell) GetTimestamp() int64 {
	return p.Timestamp
}
func (p *TCell) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TCell) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Bytes(v)
		p.Value = temp
	}
	return nil
}

func (p *TCell) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *TCell) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCell"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TCell) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err)
	}
	if err := oprot.WriteBinary(p.Value); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err)
	}
	return err
}

func (p *TCell) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err)
	}
	return err
}

func (p *TCell) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCell(%+v)", *p)
}

// An HColumnDescriptor contains information about a column family
// such as the number of versions, compression settings, etc. It is
// used as input when creating a table or adding a column.
//
// Attributes:
//  - Name
//  - MaxVersions
//  - Compression
//  - InMemory
//  - BloomFilterType
//  - BloomFilterVectorSize
//  - BloomFilterNbHashes
//  - BlockCacheEnabled
//  - TimeToLive
type ColumnDescriptor struct {
	Name                  Text   `thrift:"name,1" db:"name" json:"name"`
	MaxVersions           int32  `thrift:"maxVersions,2" db:"maxVersions" json:"maxVersions"`
	Compression           string `thrift:"compression,3" db:"compression" json:"compression"`
	InMemory              bool   `thrift:"inMemory,4" db:"inMemory" json:"inMemory"`
	BloomFilterType       string `thrift:"bloomFilterType,5" db:"bloomFilterType" json:"bloomFilterType"`
	BloomFilterVectorSize int32  `thrift:"bloomFilterVectorSize,6" db:"bloomFilterVectorSize" json:"bloomFilterVectorSize"`
	BloomFilterNbHashes   int32  `thrift:"bloomFilterNbHashes,7" db:"bloomFilterNbHashes" json:"bloomFilterNbHashes"`
	BlockCacheEnabled     bool   `thrift:"blockCacheEnabled,8" db:"blockCacheEnabled" json:"blockCacheEnabled"`
	TimeToLive            int32  `thrift:"timeToLive,9" db:"timeToLive" json:"timeToLive"`
}

func NewColumnDescriptor() *ColumnDescriptor {
	return &ColumnDescriptor{
		MaxVersions: 3,

		Compression: "NONE",

		BloomFilterType: "NONE",

		TimeToLive: 2147483647,
	}
}

func (p *ColumnDescriptor) GetName() Text {
	return p.Name
}

func (p *ColumnDescriptor) GetMaxVersions() int32 {
	return p.MaxVersions
}

func (p *ColumnDescriptor) GetCompression() string {
	return p.Compression
}

func (p *ColumnDescriptor) GetInMemory() bool {
	return p.InMemory
}

func (p *ColumnDescriptor) GetBloomFilterType() string {
	return p.BloomFilterType
}

func (p *ColumnDescriptor) GetBloomFilterVectorSize() int32 {
	return p.BloomFilterVectorSize
}

func (p *ColumnDescriptor) GetBloomFilterNbHashes() int32 {
	return p.BloomFilterNbHashes
}

func (p *ColumnDescriptor) GetBlockCacheEnabled() bool {
	return p.BlockCacheEnabled
}

func (p *ColumnDescriptor) GetTimeToLive() int32 {
	return p.TimeToLive
}
func (p *ColumnDescriptor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ColumnDescriptor) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.Name = temp
	}
	return nil
}

func (p *ColumnDescriptor) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MaxVersions = v
	}
	return nil
}

func (p *ColumnDescriptor) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Compression = v
	}
	return nil
}

func (p *ColumnDescriptor) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.InMemory = v
	}
	return nil
}

func (p *ColumnDescriptor) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BloomFilterType = v
	}
	return nil
}

func (p *ColumnDescriptor) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.BloomFilterVectorSize = v
	}
	return nil
}

func (p *ColumnDescriptor) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.BloomFilterNbHashes = v
	}
	return nil
}

func (p *ColumnDescriptor) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.BlockCacheEnabled = v
	}
	return nil
}

func (p *ColumnDescriptor) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.TimeToLive = v
	}
	return nil
}

func (p *ColumnDescriptor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ColumnDescriptor"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ColumnDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteBinary(p.Name); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxVersions", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maxVersions: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxVersions)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxVersions (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maxVersions: ", p), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compression", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:compression: ", p), err)
	}
	if err := oprot.WriteString(string(p.Compression)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.compression (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:compression: ", p), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inMemory", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:inMemory: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.InMemory)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.inMemory (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:inMemory: ", p), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bloomFilterType", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bloomFilterType: ", p), err)
	}
	if err := oprot.WriteString(string(p.BloomFilterType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bloomFilterType (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bloomFilterType: ", p), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bloomFilterVectorSize", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:bloomFilterVectorSize: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BloomFilterVectorSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bloomFilterVectorSize (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:bloomFilterVectorSize: ", p), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bloomFilterNbHashes", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:bloomFilterNbHashes: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BloomFilterNbHashes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bloomFilterNbHashes (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:bloomFilterNbHashes: ", p), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockCacheEnabled", thrift.BOOL, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:blockCacheEnabled: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.BlockCacheEnabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockCacheEnabled (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:blockCacheEnabled: ", p), err)
	}
	return err
}

func (p *ColumnDescriptor) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timeToLive", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:timeToLive: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TimeToLive)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timeToLive (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:timeToLive: ", p), err)
	}
	return err
}

func (p *ColumnDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnDescriptor(%+v)", *p)
}

// A TRegionInfo contains information about an HTable region.
//
// Attributes:
//  - StartKey
//  - EndKey
//  - ID
//  - Name
//  - Version
//  - ServerName
//  - Port
type TRegionInfo struct {
	StartKey   Text  `thrift:"startKey,1" db:"startKey" json:"startKey"`
	EndKey     Text  `thrift:"endKey,2" db:"endKey" json:"endKey"`
	ID         int64 `thrift:"id,3" db:"id" json:"id"`
	Name       Text  `thrift:"name,4" db:"name" json:"name"`
	Version    int8  `thrift:"version,5" db:"version" json:"version"`
	ServerName Text  `thrift:"serverName,6" db:"serverName" json:"serverName"`
	Port       int32 `thrift:"port,7" db:"port" json:"port"`
}

func NewTRegionInfo() *TRegionInfo {
	return &TRegionInfo{}
}

func (p *TRegionInfo) GetStartKey() Text {
	return p.StartKey
}

func (p *TRegionInfo) GetEndKey() Text {
	return p.EndKey
}

func (p *TRegionInfo) GetID() int64 {
	return p.ID
}

func (p *TRegionInfo) GetName() Text {
	return p.Name
}

func (p *TRegionInfo) GetVersion() int8 {
	return p.Version
}

func (p *TRegionInfo) GetServerName() Text {
	return p.ServerName
}

func (p *TRegionInfo) GetPort() int32 {
	return p.Port
}
func (p *TRegionInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TRegionInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.StartKey = temp
	}
	return nil
}

func (p *TRegionInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.EndKey = temp
	}
	return nil
}

func (p *TRegionInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TRegionInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := Text(v)
		p.Name = temp
	}
	return nil
}

func (p *TRegionInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := int8(v)
		p.Version = temp
	}
	return nil
}

func (p *TRegionInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := Text(v)
		p.ServerName = temp
	}
	return nil
}

func (p *TRegionInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *TRegionInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRegionInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRegionInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startKey", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.StartKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startKey (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startKey: ", p), err)
	}
	return err
}

func (p *TRegionInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endKey: ", p), err)
	}
	if err := oprot.WriteBinary(p.EndKey); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endKey: ", p), err)
	}
	return err
}

func (p *TRegionInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:id: ", p), err)
	}
	return err
}

func (p *TRegionInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:name: ", p), err)
	}
	if err := oprot.WriteBinary(p.Name); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:name: ", p), err)
	}
	return err
}

func (p *TRegionInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.BYTE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:version: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:version: ", p), err)
	}
	return err
}

func (p *TRegionInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serverName", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:serverName: ", p), err)
	}
	if err := oprot.WriteBinary(p.ServerName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serverName (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:serverName: ", p), err)
	}
	return err
}

func (p *TRegionInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:port: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:port: ", p), err)
	}
	return err
}

func (p *TRegionInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRegionInfo(%+v)", *p)
}

// A Mutation object is used to either update or delete a column-value.
//
// Attributes:
//  - IsDelete
//  - Column
//  - Value
//  - WriteToWAL
type Mutation struct {
	IsDelete   bool `thrift:"isDelete,1" db:"isDelete" json:"isDelete"`
	Column     Text `thrift:"column,2" db:"column" json:"column"`
	Value      Text `thrift:"value,3" db:"value" json:"value"`
	WriteToWAL bool `thrift:"writeToWAL,4" db:"writeToWAL" json:"writeToWAL"`
}

func NewMutation() *Mutation {
	return &Mutation{
		WriteToWAL: true,
	}
}

func (p *Mutation) GetIsDelete() bool {
	return p.IsDelete
}

func (p *Mutation) GetColumn() Text {
	return p.Column
}

func (p *Mutation) GetValue() Text {
	return p.Value
}

func (p *Mutation) GetWriteToWAL() bool {
	return p.WriteToWAL
}
func (p *Mutation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Mutation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IsDelete = v
	}
	return nil
}

func (p *Mutation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Column = temp
	}
	return nil
}

func (p *Mutation) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Text(v)
		p.Value = temp
	}
	return nil
}

func (p *Mutation) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.WriteToWAL = v
	}
	return nil
}

func (p *Mutation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Mutation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Mutation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isDelete", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:isDelete: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.IsDelete)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isDelete (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:isDelete: ", p), err)
	}
	return err
}

func (p *Mutation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:column: ", p), err)
	}
	if err := oprot.WriteBinary(p.Column); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.column (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:column: ", p), err)
	}
	return err
}

func (p *Mutation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err)
	}
	if err := oprot.WriteBinary(p.Value); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err)
	}
	return err
}

func (p *Mutation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("writeToWAL", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:writeToWAL: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WriteToWAL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.writeToWAL (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:writeToWAL: ", p), err)
	}
	return err
}

func (p *Mutation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Mutation(%+v)", *p)
}

// A BatchMutation object is used to apply a number of Mutations to a single row.
//
// Attributes:
//  - Row
//  - Mutations
type BatchMutation struct {
	Row       Text        `thrift:"row,1" db:"row" json:"row"`
	Mutations []*Mutation `thrift:"mutations,2" db:"mutations" json:"mutations"`
}

func NewBatchMutation() *BatchMutation {
	return &BatchMutation{}
}

func (p *BatchMutation) GetRow() Text {
	return p.Row
}

func (p *BatchMutation) GetMutations() []*Mutation {
	return p.Mutations
}
func (p *BatchMutation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BatchMutation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *BatchMutation) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Mutation, 0, size)
	p.Mutations = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Mutation{
			WriteToWAL: true,
		}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Mutations = append(p.Mutations, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BatchMutation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BatchMutation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BatchMutation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row: ", p), err)
	}
	return err
}

func (p *BatchMutation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mutations", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mutations: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Mutations)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Mutations {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mutations: ", p), err)
	}
	return err
}

func (p *BatchMutation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchMutation(%+v)", *p)
}

// For increments that are not incrementColumnValue
// equivalents.
//
// Attributes:
//  - Table
//  - Row
//  - Column
//  - Ammount
type TIncrement struct {
	Table   Text  `thrift:"table,1" db:"table" json:"table"`
	Row     Text  `thrift:"row,2" db:"row" json:"row"`
	Column  Text  `thrift:"column,3" db:"column" json:"column"`
	Ammount int64 `thrift:"ammount,4" db:"ammount" json:"ammount"`
}

func NewTIncrement() *TIncrement {
	return &TIncrement{}
}

func (p *TIncrement) GetTable() Text {
	return p.Table
}

func (p *TIncrement) GetRow() Text {
	return p.Row
}

func (p *TIncrement) GetColumn() Text {
	return p.Column
}

func (p *TIncrement) GetAmmount() int64 {
	return p.Ammount
}
func (p *TIncrement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIncrement) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.Table = temp
	}
	return nil
}

func (p *TIncrement) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *TIncrement) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Text(v)
		p.Column = temp
	}
	return nil
}

func (p *TIncrement) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Ammount = v
	}
	return nil
}

func (p *TIncrement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TIncrement"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIncrement) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err)
	}
	if err := oprot.WriteBinary(p.Table); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err)
	}
	return err
}

func (p *TIncrement) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *TIncrement) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column: ", p), err)
	}
	if err := oprot.WriteBinary(p.Column); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.column (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column: ", p), err)
	}
	return err
}

func (p *TIncrement) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ammount", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ammount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Ammount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ammount (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ammount: ", p), err)
	}
	return err
}

func (p *TIncrement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIncrement(%+v)", *p)
}

// Holds column name and the cell.
//
// Attributes:
//  - ColumnName
//  - Cell
type TColumn struct {
	ColumnName Text   `thrift:"columnName,1" db:"columnName" json:"columnName"`
	Cell       *TCell `thrift:"cell,2" db:"cell" json:"cell"`
}

func NewTColumn() *TColumn {
	return &TColumn{}
}

func (p *TColumn) GetColumnName() Text {
	return p.ColumnName
}

var TColumn_Cell_DEFAULT *TCell

func (p *TColumn) GetCell() *TCell {
	if !p.IsSetCell() {
		return TColumn_Cell_DEFAULT
	}
	return p.Cell
}
func (p *TColumn) IsSetCell() bool {
	return p.Cell != nil
}

func (p *TColumn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TColumn) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.ColumnName = temp
	}
	return nil
}

func (p *TColumn) ReadField2(iprot thrift.TProtocol) error {
	p.Cell = &TCell{}
	if err := p.Cell.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cell), err)
	}
	return nil
}

func (p *TColumn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumn"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TColumn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columnName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:columnName: ", p), err)
	}
	if err := oprot.WriteBinary(p.ColumnName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.columnName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:columnName: ", p), err)
	}
	return err
}

func (p *TColumn) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cell", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cell: ", p), err)
	}
	if err := p.Cell.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cell), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cell: ", p), err)
	}
	return err
}

func (p *TColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumn(%+v)", *p)
}

// Holds row name and then a map of columns to cells.
//
// Attributes:
//  - Row
//  - Columns
//  - SortedColumns
type TRowResult_ struct {
	Row           Text              `thrift:"row,1" db:"row" json:"row"`
	Columns       map[string]*TCell `thrift:"columns,2" db:"columns" json:"columns,omitempty"`
	SortedColumns []*TColumn        `thrift:"sortedColumns,3" db:"sortedColumns" json:"sortedColumns,omitempty"`
}

func NewTRowResult_() *TRowResult_ {
	return &TRowResult_{}
}

func (p *TRowResult_) GetRow() Text {
	return p.Row
}

var TRowResult__Columns_DEFAULT map[string]*TCell

func (p *TRowResult_) GetColumns() map[string]*TCell {
	return p.Columns
}

var TRowResult__SortedColumns_DEFAULT []*TColumn

func (p *TRowResult_) GetSortedColumns() []*TColumn {
	return p.SortedColumns
}
func (p *TRowResult_) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TRowResult_) IsSetSortedColumns() bool {
	return p.SortedColumns != nil
}

func (p *TRowResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TRowResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *TRowResult_) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*TCell, size)
	p.Columns = tMap
	for i := 0; i < size; i++ {
		var _key1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key1 = string(temp)
		}
		_val2 := &TCell{}
		if err := _val2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val2), err)
		}
		p.Columns[_key1] = _val2
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TRowResult_) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TColumn, 0, size)
	p.SortedColumns = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &TColumn{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.SortedColumns = append(p.SortedColumns, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TRowResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRowResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TRowResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row: ", p), err)
	}
	return err
}

func (p *TRowResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err := oprot.WriteFieldBegin("columns", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:columns: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Columns)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Columns {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:columns: ", p), err)
		}
	}
	return err
}

func (p *TRowResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortedColumns() {
		if err := oprot.WriteFieldBegin("sortedColumns", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sortedColumns: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SortedColumns)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.SortedColumns {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sortedColumns: ", p), err)
		}
	}
	return err
}

func (p *TRowResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRowResult_(%+v)", *p)
}

// A Scan object is used to specify scanner parameters when opening a scanner.
//
// Attributes:
//  - StartRow
//  - StopRow
//  - Timestamp
//  - Columns
//  - Caching
//  - FilterString
//  - BatchSize
//  - SortColumns
//  - Reversed
type TScan struct {
	StartRow     Text   `thrift:"startRow,1" db:"startRow" json:"startRow,omitempty"`
	StopRow      Text   `thrift:"stopRow,2" db:"stopRow" json:"stopRow,omitempty"`
	Timestamp    *int64 `thrift:"timestamp,3" db:"timestamp" json:"timestamp,omitempty"`
	Columns      []Text `thrift:"columns,4" db:"columns" json:"columns,omitempty"`
	Caching      *int32 `thrift:"caching,5" db:"caching" json:"caching,omitempty"`
	FilterString Text   `thrift:"filterString,6" db:"filterString" json:"filterString,omitempty"`
	BatchSize    *int32 `thrift:"batchSize,7" db:"batchSize" json:"batchSize,omitempty"`
	SortColumns  *bool  `thrift:"sortColumns,8" db:"sortColumns" json:"sortColumns,omitempty"`
	Reversed     *bool  `thrift:"reversed,9" db:"reversed" json:"reversed,omitempty"`
}

func NewTScan() *TScan {
	return &TScan{}
}

var TScan_StartRow_DEFAULT Text

func (p *TScan) GetStartRow() Text {
	return p.StartRow
}

var TScan_StopRow_DEFAULT Text

func (p *TScan) GetStopRow() Text {
	return p.StopRow
}

var TScan_Timestamp_DEFAULT int64

func (p *TScan) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return TScan_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var TScan_Columns_DEFAULT []Text

func (p *TScan) GetColumns() []Text {
	return p.Columns
}

var TScan_Caching_DEFAULT int32

func (p *TScan) GetCaching() int32 {
	if !p.IsSetCaching() {
		return TScan_Caching_DEFAULT
	}
	return *p.Caching
}

var TScan_FilterString_DEFAULT Text

func (p *TScan) GetFilterString() Text {
	return p.FilterString
}

var TScan_BatchSize_DEFAULT int32

func (p *TScan) GetBatchSize() int32 {
	if !p.IsSetBatchSize() {
		return TScan_BatchSize_DEFAULT
	}
	return *p.BatchSize
}

var TScan_SortColumns_DEFAULT bool

func (p *TScan) GetSortColumns() bool {
	if !p.IsSetSortColumns() {
		return TScan_SortColumns_DEFAULT
	}
	return *p.SortColumns
}

var TScan_Reversed_DEFAULT bool

func (p *TScan) GetReversed() bool {
	if !p.IsSetReversed() {
		return TScan_Reversed_DEFAULT
	}
	return *p.Reversed
}
func (p *TScan) IsSetStartRow() bool {
	return p.StartRow != nil
}

func (p *TScan) IsSetStopRow() bool {
	return p.StopRow != nil
}

func (p *TScan) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *TScan) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *TScan) IsSetCaching() bool {
	return p.Caching != nil
}

func (p *TScan) IsSetFilterString() bool {
	return p.FilterString != nil
}

func (p *TScan) IsSetBatchSize() bool {
	return p.BatchSize != nil
}

func (p *TScan) IsSetSortColumns() bool {
	return p.SortColumns != nil
}

func (p *TScan) IsSetReversed() bool {
	return p.Reversed != nil
}

func (p *TScan) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TScan) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.StartRow = temp
	}
	return nil
}

func (p *TScan) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.StopRow = temp
	}
	return nil
}

func (p *TScan) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *TScan) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		var _elem4 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem4 = temp
		}
		p.Columns = append(p.Columns, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TScan) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Caching = &v
	}
	return nil
}

func (p *TScan) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := Text(v)
		p.FilterString = temp
	}
	return nil
}

func (p *TScan) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.BatchSize = &v
	}
	return nil
}

func (p *TScan) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.SortColumns = &v
	}
	return nil
}

func (p *TScan) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Reversed = &v
	}
	return nil
}

func (p *TScan) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TScan"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TScan) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartRow() {
		if err := oprot.WriteFieldBegin("startRow", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startRow: ", p), err)
		}
		if err := oprot.WriteBinary(p.StartRow); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.startRow (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startRow: ", p), err)
		}
	}
	return err
}

func (p *TScan) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStopRow() {
		if err := oprot.WriteFieldBegin("stopRow", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stopRow: ", p), err)
		}
		if err := oprot.WriteBinary(p.StopRow); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.stopRow (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stopRow: ", p), err)
		}
	}
	return err
}

func (p *TScan) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
		}
	}
	return err
}

func (p *TScan) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err := oprot.WriteFieldBegin("columns", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:columns: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Columns {
			if err := oprot.WriteBinary(v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:columns: ", p), err)
		}
	}
	return err
}

func (p *TScan) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaching() {
		if err := oprot.WriteFieldBegin("caching", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:caching: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Caching)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.caching (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:caching: ", p), err)
		}
	}
	return err
}

func (p *TScan) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterString() {
		if err := oprot.WriteFieldBegin("filterString", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:filterString: ", p), err)
		}
		if err := oprot.WriteBinary(p.FilterString); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.filterString (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:filterString: ", p), err)
		}
	}
	return err
}

func (p *TScan) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchSize() {
		if err := oprot.WriteFieldBegin("batchSize", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:batchSize: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.BatchSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.batchSize (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:batchSize: ", p), err)
		}
	}
	return err
}

func (p *TScan) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortColumns() {
		if err := oprot.WriteFieldBegin("sortColumns", thrift.BOOL, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sortColumns: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.SortColumns)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sortColumns (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sortColumns: ", p), err)
		}
	}
	return err
}

func (p *TScan) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetReversed() {
		if err := oprot.WriteFieldBegin("reversed", thrift.BOOL, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:reversed: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Reversed)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reversed (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:reversed: ", p), err)
		}
	}
	return err
}

func (p *TScan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScan(%+v)", *p)
}

// An Append object is used to specify the parameters for performing the append operation.
//
// Attributes:
//  - Table
//  - Row
//  - Columns
//  - Values
type TAppend struct {
	Table   Text   `thrift:"table,1" db:"table" json:"table"`
	Row     Text   `thrift:"row,2" db:"row" json:"row"`
	Columns []Text `thrift:"columns,3" db:"columns" json:"columns"`
	Values  []Text `thrift:"values,4" db:"values" json:"values"`
}

func NewTAppend() *TAppend {
	return &TAppend{}
}

func (p *TAppend) GetTable() Text {
	return p.Table
}

func (p *TAppend) GetRow() Text {
	return p.Row
}

func (p *TAppend) GetColumns() []Text {
	return p.Columns
}

func (p *TAppend) GetValues() []Text {
	return p.Values
}
func (p *TAppend) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TAppend) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.Table = temp
	}
	return nil
}

func (p *TAppend) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *TAppend) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		var _elem5 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem5 = temp
		}
		p.Columns = append(p.Columns, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAppend) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Values = tSlice
	for i := 0; i < size; i++ {
		var _elem6 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem6 = temp
		}
		p.Values = append(p.Values, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TAppend) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TAppend"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TAppend) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:table: ", p), err)
	}
	if err := oprot.WriteBinary(p.Table); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:table: ", p), err)
	}
	return err
}

func (p *TAppend) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *TAppend) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Columns {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err)
	}
	return err
}

func (p *TAppend) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("values", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:values: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Values)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Values {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:values: ", p), err)
	}
	return err
}

func (p *TAppend) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TAppend(%+v)", *p)
}

// An IOError exception signals that an error occurred communicating
// to the Hbase master or an Hbase region server.  Also used to return
// more general Hbase error conditions.
//
// Attributes:
//  - Message
type IOError struct {
	Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewIOError() *IOError {
	return &IOError{}
}

func (p *IOError) GetMessage() string {
	return p.Message
}
func (p *IOError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IOError) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *IOError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IOError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IOError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *IOError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IOError(%+v)", *p)
}

func (p *IOError) Error() string {
	return p.String()
}

// An IllegalArgument exception indicates an illegal or invalid
// argument was passed into a procedure.
//
// Attributes:
//  - Message
type IllegalArgument struct {
	Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewIllegalArgument() *IllegalArgument {
	return &IllegalArgument{}
}

func (p *IllegalArgument) GetMessage() string {
	return p.Message
}
func (p *IllegalArgument) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IllegalArgument) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *IllegalArgument) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IllegalArgument"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IllegalArgument) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *IllegalArgument) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IllegalArgument(%+v)", *p)
}

func (p *IllegalArgument) Error() string {
	return p.String()
}

// An AlreadyExists exceptions signals that a table with the specified
// name already exists
//
// Attributes:
//  - Message
type AlreadyExists struct {
	Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewAlreadyExists() *AlreadyExists {
	return &AlreadyExists{}
}

func (p *AlreadyExists) GetMessage() string {
	return p.Message
}
func (p *AlreadyExists) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AlreadyExists) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *AlreadyExists) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AlreadyExists"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AlreadyExists) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *AlreadyExists) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlreadyExists(%+v)", *p)
}

func (p *AlreadyExists) Error() string {
	return p.String()
}

type Hbase interface {
	// Brings a table on-line (enables it)
	//
	// Parameters:
	//  - TableName: name of the table
	EnableTable(ctx context.Context, tableName Bytes) (err error)
	// Disables a table (takes it off-line) If it is being served, the master
	// will tell the servers to stop serving it.
	//
	// Parameters:
	//  - TableName: name of the table
	DisableTable(ctx context.Context, tableName Bytes) (err error)
	// @return true if table is on-line
	//
	// Parameters:
	//  - TableName: name of the table to check
	IsTableEnabled(ctx context.Context, tableName Bytes) (r bool, err error)
	// Parameters:
	//  - TableNameOrRegionName
	Compact(ctx context.Context, tableNameOrRegionName Bytes) (err error)
	// Parameters:
	//  - TableNameOrRegionName
	MajorCompact(ctx context.Context, tableNameOrRegionName Bytes) (err error)
	// List all the userspace tables.
	//
	// @return returns a list of names
	GetTableNames(ctx context.Context) (r []Text, err error)
	// List all the column families assoicated with a table.
	//
	// @return list of column family descriptors
	//
	// Parameters:
	//  - TableName: table name
	GetColumnDescriptors(ctx context.Context, tableName Text) (r map[string]*ColumnDescriptor, err error)
	// List the regions associated with a table.
	//
	// @return list of region descriptors
	//
	// Parameters:
	//  - TableName: table name
	GetTableRegions(ctx context.Context, tableName Text) (r []*TRegionInfo, err error)
	// Create a table with the specified column families.  The name
	// field for each ColumnDescriptor must be set and must end in a
	// colon (:). All other fields are optional and will get default
	// values if not explicitly specified.
	//
	// @throws IllegalArgument if an input parameter is invalid
	//
	// @throws AlreadyExists if the table name already exists
	//
	// Parameters:
	//  - TableName: name of table to create
	//  - ColumnFamilies: list of column family descriptors
	CreateTable(ctx context.Context, tableName Text, columnFamilies []*ColumnDescriptor) (err error)
	// Deletes a table
	//
	// @throws IOError if table doesn't exist on server or there was some other
	// problem
	//
	// Parameters:
	//  - TableName: name of table to delete
	DeleteTable(ctx context.Context, tableName Text) (err error)
	// Get a single TCell for the specified table, row, and column at the
	// latest timestamp. Returns an empty list if no such value exists.
	//
	// @return value for specified row/column
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: row key
	//  - Column: column name
	//  - Attributes: Get attributes
	Get(ctx context.Context, tableName Text, row Text, column Text, attributes map[string]Text) (r []*TCell, err error)
	// Get the specified number of versions for the specified table,
	// row, and column.
	//
	// @return list of cells for specified row/column
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: row key
	//  - Column: column name
	//  - NumVersions: number of versions to retrieve
	//  - Attributes: Get attributes
	GetVer(ctx context.Context, tableName Text, row Text, column Text, numVersions int32, attributes map[string]Text) (r []*TCell, err error)
	// Get the specified number of versions for the specified table,
	// row, and column.  Only versions less than or equal to the specified
	// timestamp will be returned.
	//
	// @return list of cells for specified row/column
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: row key
	//  - Column: column name
	//  - Timestamp: timestamp
	//  - NumVersions: number of versions to retrieve
	//  - Attributes: Get attributes
	GetVerTs(ctx context.Context, tableName Text, row Text, column Text, timestamp int64, numVersions int32, attributes map[string]Text) (r []*TCell, err error)
	// Get all the data for the specified table and row at the latest
	// timestamp. Returns an empty list if the row does not exist.
	//
	// @return TRowResult containing the row and map of columns to TCells
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: row key
	//  - Attributes: Get attributes
	GetRow(ctx context.Context, tableName Text, row Text, attributes map[string]Text) (r []*TRowResult_, err error)
	// Get the specified columns for the specified table and row at the latest
	// timestamp. Returns an empty list if the row does not exist.
	//
	// @return TRowResult containing the row and map of columns to TCells
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: row key
	//  - Columns: List of columns to return, null for all columns
	//  - Attributes: Get attributes
	GetRowWithColumns(ctx context.Context, tableName Text, row Text, columns []Text, attributes map[string]Text) (r []*TRowResult_, err error)
	// Get all the data for the specified table and row at the specified
	// timestamp. Returns an empty list if the row does not exist.
	//
	// @return TRowResult containing the row and map of columns to TCells
	//
	// Parameters:
	//  - TableName: name of the table
	//  - Row: row key
	//  - Timestamp: timestamp
	//  - Attributes: Get attributes
	GetRowTs(ctx context.Context, tableName Text, row Text, timestamp int64, attributes map[string]Text) (r []*TRowResult_, err error)
	// Get the specified columns for the specified table and row at the specified
	// timestamp. Returns an empty list if the row does not exist.
	//
	// @return TRowResult containing the row and map of columns to TCells
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: row key
	//  - Columns: List of columns to return, null for all columns
	//  - Timestamp
	//  - Attributes: Get attributes
	GetRowWithColumnsTs(ctx context.Context, tableName Text, row Text, columns []Text, timestamp int64, attributes map[string]Text) (r []*TRowResult_, err error)
	// Get all the data for the specified table and rows at the latest
	// timestamp. Returns an empty list if no rows exist.
	//
	// @return TRowResult containing the rows and map of columns to TCells
	//
	// Parameters:
	//  - TableName: name of table
	//  - Rows: row keys
	//  - Attributes: Get attributes
	GetRows(ctx context.Context, tableName Text, rows []Text, attributes map[string]Text) (r []*TRowResult_, err error)
	// Get the specified columns for the specified table and rows at the latest
	// timestamp. Returns an empty list if no rows exist.
	//
	// @return TRowResult containing the rows and map of columns to TCells
	//
	// Parameters:
	//  - TableName: name of table
	//  - Rows: row keys
	//  - Columns: List of columns to return, null for all columns
	//  - Attributes: Get attributes
	GetRowsWithColumns(ctx context.Context, tableName Text, rows []Text, columns []Text, attributes map[string]Text) (r []*TRowResult_, err error)
	// Get all the data for the specified table and rows at the specified
	// timestamp. Returns an empty list if no rows exist.
	//
	// @return TRowResult containing the rows and map of columns to TCells
	//
	// Parameters:
	//  - TableName: name of the table
	//  - Rows: row keys
	//  - Timestamp: timestamp
	//  - Attributes: Get attributes
	GetRowsTs(ctx context.Context, tableName Text, rows []Text, timestamp int64, attributes map[string]Text) (r []*TRowResult_, err error)
	// Get the specified columns for the specified table and rows at the specified
	// timestamp. Returns an empty list if no rows exist.
	//
	// @return TRowResult containing the rows and map of columns to TCells
	//
	// Parameters:
	//  - TableName: name of table
	//  - Rows: row keys
	//  - Columns: List of columns to return, null for all columns
	//  - Timestamp
	//  - Attributes: Get attributes
	GetRowsWithColumnsTs(ctx context.Context, tableName Text, rows []Text, columns []Text, timestamp int64, attributes map[string]Text) (r []*TRowResult_, err error)
	// Apply a series of mutations (updates/deletes) to a row in a
	// single transaction.  If an exception is thrown, then the
	// transaction is aborted.  Default current timestamp is used, and
	// all entries will have an identical timestamp.
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: row key
	//  - Mutations: list of mutation commands
	//  - Attributes: Mutation attributes
	MutateRow(ctx context.Context, tableName Text, row Text, mutations []*Mutation, attributes map[string]Text) (err error)
	// Apply a series of mutations (updates/deletes) to a row in a
	// single transaction.  If an exception is thrown, then the
	// transaction is aborted.  The specified timestamp is used, and
	// all entries will have an identical timestamp.
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: row key
	//  - Mutations: list of mutation commands
	//  - Timestamp: timestamp
	//  - Attributes: Mutation attributes
	MutateRowTs(ctx context.Context, tableName Text, row Text, mutations []*Mutation, timestamp int64, attributes map[string]Text) (err error)
	// Apply a series of batches (each a series of mutations on a single row)
	// in a single transaction.  If an exception is thrown, then the
	// transaction is aborted.  Default current timestamp is used, and
	// all entries will have an identical timestamp.
	//
	// Parameters:
	//  - TableName: name of table
	//  - RowBatches: list of row batches
	//  - Attributes: Mutation attributes
	MutateRows(ctx context.Context, tableName Text, rowBatches []*BatchMutation, attributes map[string]Text) (err error)
	// Apply a series of batches (each a series of mutations on a single row)
	// in a single transaction.  If an exception is thrown, then the
	// transaction is aborted.  The specified timestamp is used, and
	// all entries will have an identical timestamp.
	//
	// Parameters:
	//  - TableName: name of table
	//  - RowBatches: list of row batches
	//  - Timestamp: timestamp
	//  - Attributes: Mutation attributes
	MutateRowsTs(ctx context.Context, tableName Text, rowBatches []*BatchMutation, timestamp int64, attributes map[string]Text) (err error)
	// Atomically increment the column value specified.  Returns the next value post increment.
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: row to increment
	//  - Column: name of column
	//  - Value: amount to increment by
	AtomicIncrement(ctx context.Context, tableName Text, row Text, column Text, value int64) (r int64, err error)
	// Delete all cells that match the passed row and column.
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: Row to update
	//  - Column: name of column whose value is to be deleted
	//  - Attributes: Delete attributes
	DeleteAll(ctx context.Context, tableName Text, row Text, column Text, attributes map[string]Text) (err error)
	// Delete all cells that match the passed row and column and whose
	// timestamp is equal-to or older than the passed timestamp.
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: Row to update
	//  - Column: name of column whose value is to be deleted
	//  - Timestamp: timestamp
	//  - Attributes: Delete attributes
	DeleteAllTs(ctx context.Context, tableName Text, row Text, column Text, timestamp int64, attributes map[string]Text) (err error)
	// Completely delete the row's cells.
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: key of the row to be completely deleted.
	//  - Attributes: Delete attributes
	DeleteAllRow(ctx context.Context, tableName Text, row Text, attributes map[string]Text) (err error)
	// Increment a cell by the ammount.
	// Increments can be applied async if hbase.regionserver.thrift.coalesceIncrement is set to true.
	// False is the default.  Turn to true if you need the extra performance and can accept some
	// data loss if a thrift server dies with increments still in the queue.
	//
	// Parameters:
	//  - Increment: The single increment to apply
	Increment(ctx context.Context, increment *TIncrement) (err error)
	// Parameters:
	//  - Increments: The list of increments
	IncrementRows(ctx context.Context, increments []*TIncrement) (err error)
	// Completely delete the row's cells marked with a timestamp
	// equal-to or older than the passed timestamp.
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: key of the row to be completely deleted.
	//  - Timestamp: timestamp
	//  - Attributes: Delete attributes
	DeleteAllRowTs(ctx context.Context, tableName Text, row Text, timestamp int64, attributes map[string]Text) (err error)
	// Get a scanner on the current table, using the Scan instance
	// for the scan parameters.
	//
	// Parameters:
	//  - TableName: name of table
	//  - Scan: Scan instance
	//  - Attributes: Scan attributes
	ScannerOpenWithScan(ctx context.Context, tableName Text, scan *TScan, attributes map[string]Text) (r ScannerID, err error)
	// Get a scanner on the current table starting at the specified row and
	// ending at the last row in the table.  Return the specified columns.
	//
	// @return scanner id to be used with other scanner procedures
	//
	// Parameters:
	//  - TableName: name of table
	//  - StartRow: Starting row in table to scan.
	// Send "" (empty string) to start at the first row.
	//  - Columns: columns to scan. If column name is a column family, all
	// columns of the specified column family are returned. It's also possible
	// to pass a regex in the column qualifier.
	//  - Attributes: Scan attributes
	ScannerOpen(ctx context.Context, tableName Text, startRow Text, columns []Text, attributes map[string]Text) (r ScannerID, err error)
	// Get a scanner on the current table starting and stopping at the
	// specified rows.  ending at the last row in the table.  Return the
	// specified columns.
	//
	// @return scanner id to be used with other scanner procedures
	//
	// Parameters:
	//  - TableName: name of table
	//  - StartRow: Starting row in table to scan.
	// Send "" (empty string) to start at the first row.
	//  - StopRow: row to stop scanning on. This row is *not* included in the
	// scanner's results
	//  - Columns: columns to scan. If column name is a column family, all
	// columns of the specified column family are returned. It's also possible
	// to pass a regex in the column qualifier.
	//  - Attributes: Scan attributes
	ScannerOpenWithStop(ctx context.Context, tableName Text, startRow Text, stopRow Text, columns []Text, attributes map[string]Text) (r ScannerID, err error)
	// Open a scanner for a given prefix.  That is all rows will have the specified
	// prefix. No other rows will be returned.
	//
	// @return scanner id to use with other scanner calls
	//
	// Parameters:
	//  - TableName: name of table
	//  - StartAndPrefix: the prefix (and thus start row) of the keys you want
	//  - Columns: the columns you want returned
	//  - Attributes: Scan attributes
	ScannerOpenWithPrefix(ctx context.Context, tableName Text, startAndPrefix Text, columns []Text, attributes map[string]Text) (r ScannerID, err error)
	// Get a scanner on the current table starting at the specified row and
	// ending at the last row in the table.  Return the specified columns.
	// Only values with the specified timestamp are returned.
	//
	// @return scanner id to be used with other scanner procedures
	//
	// Parameters:
	//  - TableName: name of table
	//  - StartRow: Starting row in table to scan.
	// Send "" (empty string) to start at the first row.
	//  - Columns: columns to scan. If column name is a column family, all
	// columns of the specified column family are returned. It's also possible
	// to pass a regex in the column qualifier.
	//  - Timestamp: timestamp
	//  - Attributes: Scan attributes
	ScannerOpenTs(ctx context.Context, tableName Text, startRow Text, columns []Text, timestamp int64, attributes map[string]Text) (r ScannerID, err error)
	// Get a scanner on the current table starting and stopping at the
	// specified rows.  ending at the last row in the table.  Return the
	// specified columns.  Only values with the specified timestamp are
	// returned.
	//
	// @return scanner id to be used with other scanner procedures
	//
	// Parameters:
	//  - TableName: name of table
	//  - StartRow: Starting row in table to scan.
	// Send "" (empty string) to start at the first row.
	//  - StopRow: row to stop scanning on. This row is *not* included in the
	// scanner's results
	//  - Columns: columns to scan. If column name is a column family, all
	// columns of the specified column family are returned. It's also possible
	// to pass a regex in the column qualifier.
	//  - Timestamp: timestamp
	//  - Attributes: Scan attributes
	ScannerOpenWithStopTs(ctx context.Context, tableName Text, startRow Text, stopRow Text, columns []Text, timestamp int64, attributes map[string]Text) (r ScannerID, err error)
	// Returns the scanner's current row value and advances to the next
	// row in the table.  When there are no more rows in the table, or a key
	// greater-than-or-equal-to the scanner's specified stopRow is reached,
	// an empty list is returned.
	//
	// @return a TRowResult containing the current row and a map of the columns to TCells.
	//
	// @throws IllegalArgument if ScannerID is invalid
	//
	// @throws NotFound when the scanner reaches the end
	//
	// Parameters:
	//  - ID: id of a scanner returned by scannerOpen
	ScannerGet(ctx context.Context, id ScannerID) (r []*TRowResult_, err error)
	// Returns, starting at the scanner's current row value nbRows worth of
	// rows and advances to the next row in the table.  When there are no more
	// rows in the table, or a key greater-than-or-equal-to the scanner's
	// specified stopRow is reached,  an empty list is returned.
	//
	// @return a TRowResult containing the current row and a map of the columns to TCells.
	//
	// @throws IllegalArgument if ScannerID is invalid
	//
	// @throws NotFound when the scanner reaches the end
	//
	// Parameters:
	//  - ID: id of a scanner returned by scannerOpen
	//  - NbRows: number of results to return
	ScannerGetList(ctx context.Context, id ScannerID, nbRows int32) (r []*TRowResult_, err error)
	// Closes the server-state associated with an open scanner.
	//
	// @throws IllegalArgument if ScannerID is invalid
	//
	// Parameters:
	//  - ID: id of a scanner returned by scannerOpen
	ScannerClose(ctx context.Context, id ScannerID) (err error)
	// Get the row just before the specified one.
	//
	// @return value for specified row/column
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: row key
	//  - Family: column name
	GetRowOrBefore(ctx context.Context, tableName Text, row Text, family Text) (r []*TCell, err error)
	// Get the regininfo for the specified row. It scans
	// the metatable to find region's start and end keys.
	//
	// @return value for specified row/column
	//
	// Parameters:
	//  - Row: row key
	GetRegionInfo(ctx context.Context, row Text) (r *TRegionInfo, err error)
	// Appends values to one or more columns within a single row.
	//
	// @return values of columns after the append operation.
	//
	// Parameters:
	//  - Append: The single append operation to apply
	Append(ctx context.Context, append *TAppend) (r []*TCell, err error)
	// Atomically checks if a row/family/qualifier value matches the expected
	// value. If it does, it adds the corresponding mutation operation for put.
	//
	// @return true if the new put was executed, false otherwise
	//
	// Parameters:
	//  - TableName: name of table
	//  - Row: row key
	//  - Column: column name
	//  - Value: the expected value for the column parameter, if not
	// provided the check is for the non-existence of the
	// column in question
	//  - Mput: mutation for the put
	//  - Attributes: Mutation attributes
	CheckAndPut(ctx context.Context, tableName Text, row Text, column Text, value Text, mput *Mutation, attributes map[string]Text) (r bool, err error)
}

type HbaseClient struct {
	c thrift.TClient
}

func NewHbaseClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HbaseClient {
	return &HbaseClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewHbaseClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HbaseClient {
	return &HbaseClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewHbaseClient(c thrift.TClient) *HbaseClient {
	return &HbaseClient{
		c: c,
	}
}

func (p *HbaseClient) Client_() thrift.TClient {
	return p.c
}

// Brings a table on-line (enables it)
//
// Parameters:
//  - TableName: name of the table
func (p *HbaseClient) EnableTable(ctx context.Context, tableName Bytes) (err error) {
	var _args7 HbaseEnableTableArgs
	_args7.TableName = tableName
	var _result8 HbaseEnableTableResult
	if err = p.Client_().Call(ctx, "enableTable", &_args7, &_result8); err != nil {
		return
	}
	switch {
	case _result8.Io != nil:
		return _result8.Io
	}

	return nil
}

// Disables a table (takes it off-line) If it is being served, the master
// will tell the servers to stop serving it.
//
// Parameters:
//  - TableName: name of the table
func (p *HbaseClient) DisableTable(ctx context.Context, tableName Bytes) (err error) {
	var _args9 HbaseDisableTableArgs
	_args9.TableName = tableName
	var _result10 HbaseDisableTableResult
	if err = p.Client_().Call(ctx, "disableTable", &_args9, &_result10); err != nil {
		return
	}
	switch {
	case _result10.Io != nil:
		return _result10.Io
	}

	return nil
}

// @return true if table is on-line
//
// Parameters:
//  - TableName: name of the table to check
func (p *HbaseClient) IsTableEnabled(ctx context.Context, tableName Bytes) (r bool, err error) {
	var _args11 HbaseIsTableEnabledArgs
	_args11.TableName = tableName
	var _result12 HbaseIsTableEnabledResult
	if err = p.Client_().Call(ctx, "isTableEnabled", &_args11, &_result12); err != nil {
		return
	}
	switch {
	case _result12.Io != nil:
		return r, _result12.Io
	}

	return _result12.GetSuccess(), nil
}

// Parameters:
//  - TableNameOrRegionName
func (p *HbaseClient) Compact(ctx context.Context, tableNameOrRegionName Bytes) (err error) {
	var _args13 HbaseCompactArgs
	_args13.TableNameOrRegionName = tableNameOrRegionName
	var _result14 HbaseCompactResult
	if err = p.Client_().Call(ctx, "compact", &_args13, &_result14); err != nil {
		return
	}
	switch {
	case _result14.Io != nil:
		return _result14.Io
	}

	return nil
}

// Parameters:
//  - TableNameOrRegionName
func (p *HbaseClient) MajorCompact(ctx context.Context, tableNameOrRegionName Bytes) (err error) {
	var _args15 HbaseMajorCompactArgs
	_args15.TableNameOrRegionName = tableNameOrRegionName
	var _result16 HbaseMajorCompactResult
	if err = p.Client_().Call(ctx, "majorCompact", &_args15, &_result16); err != nil {
		return
	}
	switch {
	case _result16.Io != nil:
		return _result16.Io
	}

	return nil
}

// List all the userspace tables.
//
// @return returns a list of names
func (p *HbaseClient) GetTableNames(ctx context.Context) (r []Text, err error) {
	var _args17 HbaseGetTableNamesArgs
	var _result18 HbaseGetTableNamesResult
	if err = p.Client_().Call(ctx, "getTableNames", &_args17, &_result18); err != nil {
		return
	}
	switch {
	case _result18.Io != nil:
		return r, _result18.Io
	}

	return _result18.GetSuccess(), nil
}

// List all the column families assoicated with a table.
//
// @return list of column family descriptors
//
// Parameters:
//  - TableName: table name
func (p *HbaseClient) GetColumnDescriptors(ctx context.Context, tableName Text) (r map[string]*ColumnDescriptor, err error) {
	var _args19 HbaseGetColumnDescriptorsArgs
	_args19.TableName = tableName
	var _result20 HbaseGetColumnDescriptorsResult
	if err = p.Client_().Call(ctx, "getColumnDescriptors", &_args19, &_result20); err != nil {
		return
	}
	switch {
	case _result20.Io != nil:
		return r, _result20.Io
	}

	return _result20.GetSuccess(), nil
}

// List the regions associated with a table.
//
// @return list of region descriptors
//
// Parameters:
//  - TableName: table name
func (p *HbaseClient) GetTableRegions(ctx context.Context, tableName Text) (r []*TRegionInfo, err error) {
	var _args21 HbaseGetTableRegionsArgs
	_args21.TableName = tableName
	var _result22 HbaseGetTableRegionsResult
	if err = p.Client_().Call(ctx, "getTableRegions", &_args21, &_result22); err != nil {
		return
	}
	switch {
	case _result22.Io != nil:
		return r, _result22.Io
	}

	return _result22.GetSuccess(), nil
}

// Create a table with the specified column families.  The name
// field for each ColumnDescriptor must be set and must end in a
// colon (:). All other fields are optional and will get default
// values if not explicitly specified.
//
// @throws IllegalArgument if an input parameter is invalid
//
// @throws AlreadyExists if the table name already exists
//
// Parameters:
//  - TableName: name of table to create
//  - ColumnFamilies: list of column family descriptors
func (p *HbaseClient) CreateTable(ctx context.Context, tableName Text, columnFamilies []*ColumnDescriptor) (err error) {
	var _args23 HbaseCreateTableArgs
	_args23.TableName = tableName
	_args23.ColumnFamilies = columnFamilies
	var _result24 HbaseCreateTableResult
	if err = p.Client_().Call(ctx, "createTable", &_args23, &_result24); err != nil {
		return
	}
	switch {
	case _result24.Io != nil:
		return _result24.Io
	case _result24.Ia != nil:
		return _result24.Ia
	case _result24.Exist != nil:
		return _result24.Exist
	}

	return nil
}

// Deletes a table
//
// @throws IOError if table doesn't exist on server or there was some other
// problem
//
// Parameters:
//  - TableName: name of table to delete
func (p *HbaseClient) DeleteTable(ctx context.Context, tableName Text) (err error) {
	var _args25 HbaseDeleteTableArgs
	_args25.TableName = tableName
	var _result26 HbaseDeleteTableResult
	if err = p.Client_().Call(ctx, "deleteTable", &_args25, &_result26); err != nil {
		return
	}
	switch {
	case _result26.Io != nil:
		return _result26.Io
	}

	return nil
}

// Get a single TCell for the specified table, row, and column at the
// latest timestamp. Returns an empty list if no such value exists.
//
// @return value for specified row/column
//
// Parameters:
//  - TableName: name of table
//  - Row: row key
//  - Column: column name
//  - Attributes: Get attributes
func (p *HbaseClient) Get(ctx context.Context, tableName Text, row Text, column Text, attributes map[string]Text) (r []*TCell, err error) {
	var _args27 HbaseGetArgs
	_args27.TableName = tableName
	_args27.Row = row
	_args27.Column = column
	_args27.Attributes = attributes
	var _result28 HbaseGetResult
	if err = p.Client_().Call(ctx, "get", &_args27, &_result28); err != nil {
		return
	}
	switch {
	case _result28.Io != nil:
		return r, _result28.Io
	}

	return _result28.GetSuccess(), nil
}

// Get the specified number of versions for the specified table,
// row, and column.
//
// @return list of cells for specified row/column
//
// Parameters:
//  - TableName: name of table
//  - Row: row key
//  - Column: column name
//  - NumVersions: number of versions to retrieve
//  - Attributes: Get attributes
func (p *HbaseClient) GetVer(ctx context.Context, tableName Text, row Text, column Text, numVersions int32, attributes map[string]Text) (r []*TCell, err error) {
	var _args29 HbaseGetVerArgs
	_args29.TableName = tableName
	_args29.Row = row
	_args29.Column = column
	_args29.NumVersions = numVersions
	_args29.Attributes = attributes
	var _result30 HbaseGetVerResult
	if err = p.Client_().Call(ctx, "getVer", &_args29, &_result30); err != nil {
		return
	}
	switch {
	case _result30.Io != nil:
		return r, _result30.Io
	}

	return _result30.GetSuccess(), nil
}

// Get the specified number of versions for the specified table,
// row, and column.  Only versions less than or equal to the specified
// timestamp will be returned.
//
// @return list of cells for specified row/column
//
// Parameters:
//  - TableName: name of table
//  - Row: row key
//  - Column: column name
//  - Timestamp: timestamp
//  - NumVersions: number of versions to retrieve
//  - Attributes: Get attributes
func (p *HbaseClient) GetVerTs(ctx context.Context, tableName Text, row Text, column Text, timestamp int64, numVersions int32, attributes map[string]Text) (r []*TCell, err error) {
	var _args31 HbaseGetVerTsArgs
	_args31.TableName = tableName
	_args31.Row = row
	_args31.Column = column
	_args31.Timestamp = timestamp
	_args31.NumVersions = numVersions
	_args31.Attributes = attributes
	var _result32 HbaseGetVerTsResult
	if err = p.Client_().Call(ctx, "getVerTs", &_args31, &_result32); err != nil {
		return
	}
	switch {
	case _result32.Io != nil:
		return r, _result32.Io
	}

	return _result32.GetSuccess(), nil
}

// Get all the data for the specified table and row at the latest
// timestamp. Returns an empty list if the row does not exist.
//
// @return TRowResult containing the row and map of columns to TCells
//
// Parameters:
//  - TableName: name of table
//  - Row: row key
//  - Attributes: Get attributes
func (p *HbaseClient) GetRow(ctx context.Context, tableName Text, row Text, attributes map[string]Text) (r []*TRowResult_, err error) {
	var _args33 HbaseGetRowArgs
	_args33.TableName = tableName
	_args33.Row = row
	_args33.Attributes = attributes
	var _result34 HbaseGetRowResult
	if err = p.Client_().Call(ctx, "getRow", &_args33, &_result34); err != nil {
		return
	}
	switch {
	case _result34.Io != nil:
		return r, _result34.Io
	}

	return _result34.GetSuccess(), nil
}

// Get the specified columns for the specified table and row at the latest
// timestamp. Returns an empty list if the row does not exist.
//
// @return TRowResult containing the row and map of columns to TCells
//
// Parameters:
//  - TableName: name of table
//  - Row: row key
//  - Columns: List of columns to return, null for all columns
//  - Attributes: Get attributes
func (p *HbaseClient) GetRowWithColumns(ctx context.Context, tableName Text, row Text, columns []Text, attributes map[string]Text) (r []*TRowResult_, err error) {
	var _args35 HbaseGetRowWithColumnsArgs
	_args35.TableName = tableName
	_args35.Row = row
	_args35.Columns = columns
	_args35.Attributes = attributes
	var _result36 HbaseGetRowWithColumnsResult
	if err = p.Client_().Call(ctx, "getRowWithColumns", &_args35, &_result36); err != nil {
		return
	}
	switch {
	case _result36.Io != nil:
		return r, _result36.Io
	}

	return _result36.GetSuccess(), nil
}

// Get all the data for the specified table and row at the specified
// timestamp. Returns an empty list if the row does not exist.
//
// @return TRowResult containing the row and map of columns to TCells
//
// Parameters:
//  - TableName: name of the table
//  - Row: row key
//  - Timestamp: timestamp
//  - Attributes: Get attributes
func (p *HbaseClient) GetRowTs(ctx context.Context, tableName Text, row Text, timestamp int64, attributes map[string]Text) (r []*TRowResult_, err error) {
	var _args37 HbaseGetRowTsArgs
	_args37.TableName = tableName
	_args37.Row = row
	_args37.Timestamp = timestamp
	_args37.Attributes = attributes
	var _result38 HbaseGetRowTsResult
	if err = p.Client_().Call(ctx, "getRowTs", &_args37, &_result38); err != nil {
		return
	}
	switch {
	case _result38.Io != nil:
		return r, _result38.Io
	}

	return _result38.GetSuccess(), nil
}

// Get the specified columns for the specified table and row at the specified
// timestamp. Returns an empty list if the row does not exist.
//
// @return TRowResult containing the row and map of columns to TCells
//
// Parameters:
//  - TableName: name of table
//  - Row: row key
//  - Columns: List of columns to return, null for all columns
//  - Timestamp
//  - Attributes: Get attributes
func (p *HbaseClient) GetRowWithColumnsTs(ctx context.Context, tableName Text, row Text, columns []Text, timestamp int64, attributes map[string]Text) (r []*TRowResult_, err error) {
	var _args39 HbaseGetRowWithColumnsTsArgs
	_args39.TableName = tableName
	_args39.Row = row
	_args39.Columns = columns
	_args39.Timestamp = timestamp
	_args39.Attributes = attributes
	var _result40 HbaseGetRowWithColumnsTsResult
	if err = p.Client_().Call(ctx, "getRowWithColumnsTs", &_args39, &_result40); err != nil {
		return
	}
	switch {
	case _result40.Io != nil:
		return r, _result40.Io
	}

	return _result40.GetSuccess(), nil
}

// Get all the data for the specified table and rows at the latest
// timestamp. Returns an empty list if no rows exist.
//
// @return TRowResult containing the rows and map of columns to TCells
//
// Parameters:
//  - TableName: name of table
//  - Rows: row keys
//  - Attributes: Get attributes
func (p *HbaseClient) GetRows(ctx context.Context, tableName Text, rows []Text, attributes map[string]Text) (r []*TRowResult_, err error) {
	var _args41 HbaseGetRowsArgs
	_args41.TableName = tableName
	_args41.Rows = rows
	_args41.Attributes = attributes
	var _result42 HbaseGetRowsResult
	if err = p.Client_().Call(ctx, "getRows", &_args41, &_result42); err != nil {
		return
	}
	switch {
	case _result42.Io != nil:
		return r, _result42.Io
	}

	return _result42.GetSuccess(), nil
}

// Get the specified columns for the specified table and rows at the latest
// timestamp. Returns an empty list if no rows exist.
//
// @return TRowResult containing the rows and map of columns to TCells
//
// Parameters:
//  - TableName: name of table
//  - Rows: row keys
//  - Columns: List of columns to return, null for all columns
//  - Attributes: Get attributes
func (p *HbaseClient) GetRowsWithColumns(ctx context.Context, tableName Text, rows []Text, columns []Text, attributes map[string]Text) (r []*TRowResult_, err error) {
	var _args43 HbaseGetRowsWithColumnsArgs
	_args43.TableName = tableName
	_args43.Rows = rows
	_args43.Columns = columns
	_args43.Attributes = attributes
	var _result44 HbaseGetRowsWithColumnsResult
	if err = p.Client_().Call(ctx, "getRowsWithColumns", &_args43, &_result44); err != nil {
		return
	}
	switch {
	case _result44.Io != nil:
		return r, _result44.Io
	}

	return _result44.GetSuccess(), nil
}

// Get all the data for the specified table and rows at the specified
// timestamp. Returns an empty list if no rows exist.
//
// @return TRowResult containing the rows and map of columns to TCells
//
// Parameters:
//  - TableName: name of the table
//  - Rows: row keys
//  - Timestamp: timestamp
//  - Attributes: Get attributes
func (p *HbaseClient) GetRowsTs(ctx context.Context, tableName Text, rows []Text, timestamp int64, attributes map[string]Text) (r []*TRowResult_, err error) {
	var _args45 HbaseGetRowsTsArgs
	_args45.TableName = tableName
	_args45.Rows = rows
	_args45.Timestamp = timestamp
	_args45.Attributes = attributes
	var _result46 HbaseGetRowsTsResult
	if err = p.Client_().Call(ctx, "getRowsTs", &_args45, &_result46); err != nil {
		return
	}
	switch {
	case _result46.Io != nil:
		return r, _result46.Io
	}

	return _result46.GetSuccess(), nil
}

// Get the specified columns for the specified table and rows at the specified
// timestamp. Returns an empty list if no rows exist.
//
// @return TRowResult containing the rows and map of columns to TCells
//
// Parameters:
//  - TableName: name of table
//  - Rows: row keys
//  - Columns: List of columns to return, null for all columns
//  - Timestamp
//  - Attributes: Get attributes
func (p *HbaseClient) GetRowsWithColumnsTs(ctx context.Context, tableName Text, rows []Text, columns []Text, timestamp int64, attributes map[string]Text) (r []*TRowResult_, err error) {
	var _args47 HbaseGetRowsWithColumnsTsArgs
	_args47.TableName = tableName
	_args47.Rows = rows
	_args47.Columns = columns
	_args47.Timestamp = timestamp
	_args47.Attributes = attributes
	var _result48 HbaseGetRowsWithColumnsTsResult
	if err = p.Client_().Call(ctx, "getRowsWithColumnsTs", &_args47, &_result48); err != nil {
		return
	}
	switch {
	case _result48.Io != nil:
		return r, _result48.Io
	}

	return _result48.GetSuccess(), nil
}

// Apply a series of mutations (updates/deletes) to a row in a
// single transaction.  If an exception is thrown, then the
// transaction is aborted.  Default current timestamp is used, and
// all entries will have an identical timestamp.
//
// Parameters:
//  - TableName: name of table
//  - Row: row key
//  - Mutations: list of mutation commands
//  - Attributes: Mutation attributes
func (p *HbaseClient) MutateRow(ctx context.Context, tableName Text, row Text, mutations []*Mutation, attributes map[string]Text) (err error) {
	var _args49 HbaseMutateRowArgs
	_args49.TableName = tableName
	_args49.Row = row
	_args49.Mutations = mutations
	_args49.Attributes = attributes
	var _result50 HbaseMutateRowResult
	if err = p.Client_().Call(ctx, "mutateRow", &_args49, &_result50); err != nil {
		return
	}
	switch {
	case _result50.Io != nil:
		return _result50.Io
	case _result50.Ia != nil:
		return _result50.Ia
	}

	return nil
}

// Apply a series of mutations (updates/deletes) to a row in a
// single transaction.  If an exception is thrown, then the
// transaction is aborted.  The specified timestamp is used, and
// all entries will have an identical timestamp.
//
// Parameters:
//  - TableName: name of table
//  - Row: row key
//  - Mutations: list of mutation commands
//  - Timestamp: timestamp
//  - Attributes: Mutation attributes
func (p *HbaseClient) MutateRowTs(ctx context.Context, tableName Text, row Text, mutations []*Mutation, timestamp int64, attributes map[string]Text) (err error) {
	var _args51 HbaseMutateRowTsArgs
	_args51.TableName = tableName
	_args51.Row = row
	_args51.Mutations = mutations
	_args51.Timestamp = timestamp
	_args51.Attributes = attributes
	var _result52 HbaseMutateRowTsResult
	if err = p.Client_().Call(ctx, "mutateRowTs", &_args51, &_result52); err != nil {
		return
	}
	switch {
	case _result52.Io != nil:
		return _result52.Io
	case _result52.Ia != nil:
		return _result52.Ia
	}

	return nil
}

// Apply a series of batches (each a series of mutations on a single row)
// in a single transaction.  If an exception is thrown, then the
// transaction is aborted.  Default current timestamp is used, and
// all entries will have an identical timestamp.
//
// Parameters:
//  - TableName: name of table
//  - RowBatches: list of row batches
//  - Attributes: Mutation attributes
func (p *HbaseClient) MutateRows(ctx context.Context, tableName Text, rowBatches []*BatchMutation, attributes map[string]Text) (err error) {
	var _args53 HbaseMutateRowsArgs
	_args53.TableName = tableName
	_args53.RowBatches = rowBatches
	_args53.Attributes = attributes
	var _result54 HbaseMutateRowsResult
	if err = p.Client_().Call(ctx, "mutateRows", &_args53, &_result54); err != nil {
		return
	}
	switch {
	case _result54.Io != nil:
		return _result54.Io
	case _result54.Ia != nil:
		return _result54.Ia
	}

	return nil
}

// Apply a series of batches (each a series of mutations on a single row)
// in a single transaction.  If an exception is thrown, then the
// transaction is aborted.  The specified timestamp is used, and
// all entries will have an identical timestamp.
//
// Parameters:
//  - TableName: name of table
//  - RowBatches: list of row batches
//  - Timestamp: timestamp
//  - Attributes: Mutation attributes
func (p *HbaseClient) MutateRowsTs(ctx context.Context, tableName Text, rowBatches []*BatchMutation, timestamp int64, attributes map[string]Text) (err error) {
	var _args55 HbaseMutateRowsTsArgs
	_args55.TableName = tableName
	_args55.RowBatches = rowBatches
	_args55.Timestamp = timestamp
	_args55.Attributes = attributes
	var _result56 HbaseMutateRowsTsResult
	if err = p.Client_().Call(ctx, "mutateRowsTs", &_args55, &_result56); err != nil {
		return
	}
	switch {
	case _result56.Io != nil:
		return _result56.Io
	case _result56.Ia != nil:
		return _result56.Ia
	}

	return nil
}

// Atomically increment the column value specified.  Returns the next value post increment.
//
// Parameters:
//  - TableName: name of table
//  - Row: row to increment
//  - Column: name of column
//  - Value: amount to increment by
func (p *HbaseClient) AtomicIncrement(ctx context.Context, tableName Text, row Text, column Text, value int64) (r int64, err error) {
	var _args57 HbaseAtomicIncrementArgs
	_args57.TableName = tableName
	_args57.Row = row
	_args57.Column = column
	_args57.Value = value
	var _result58 HbaseAtomicIncrementResult
	if err = p.Client_().Call(ctx, "atomicIncrement", &_args57, &_result58); err != nil {
		return
	}
	switch {
	case _result58.Io != nil:
		return r, _result58.Io
	case _result58.Ia != nil:
		return r, _result58.Ia
	}

	return _result58.GetSuccess(), nil
}

// Delete all cells that match the passed row and column.
//
// Parameters:
//  - TableName: name of table
//  - Row: Row to update
//  - Column: name of column whose value is to be deleted
//  - Attributes: Delete attributes
func (p *HbaseClient) DeleteAll(ctx context.Context, tableName Text, row Text, column Text, attributes map[string]Text) (err error) {
	var _args59 HbaseDeleteAllArgs
	_args59.TableName = tableName
	_args59.Row = row
	_args59.Column = column
	_args59.Attributes = attributes
	var _result60 HbaseDeleteAllResult
	if err = p.Client_().Call(ctx, "deleteAll", &_args59, &_result60); err != nil {
		return
	}
	switch {
	case _result60.Io != nil:
		return _result60.Io
	}

	return nil
}

// Delete all cells that match the passed row and column and whose
// timestamp is equal-to or older than the passed timestamp.
//
// Parameters:
//  - TableName: name of table
//  - Row: Row to update
//  - Column: name of column whose value is to be deleted
//  - Timestamp: timestamp
//  - Attributes: Delete attributes
func (p *HbaseClient) DeleteAllTs(ctx context.Context, tableName Text, row Text, column Text, timestamp int64, attributes map[string]Text) (err error) {
	var _args61 HbaseDeleteAllTsArgs
	_args61.TableName = tableName
	_args61.Row = row
	_args61.Column = column
	_args61.Timestamp = timestamp
	_args61.Attributes = attributes
	var _result62 HbaseDeleteAllTsResult
	if err = p.Client_().Call(ctx, "deleteAllTs", &_args61, &_result62); err != nil {
		return
	}
	switch {
	case _result62.Io != nil:
		return _result62.Io
	}

	return nil
}

// Completely delete the row's cells.
//
// Parameters:
//  - TableName: name of table
//  - Row: key of the row to be completely deleted.
//  - Attributes: Delete attributes
func (p *HbaseClient) DeleteAllRow(ctx context.Context, tableName Text, row Text, attributes map[string]Text) (err error) {
	var _args63 HbaseDeleteAllRowArgs
	_args63.TableName = tableName
	_args63.Row = row
	_args63.Attributes = attributes
	var _result64 HbaseDeleteAllRowResult
	if err = p.Client_().Call(ctx, "deleteAllRow", &_args63, &_result64); err != nil {
		return
	}
	switch {
	case _result64.Io != nil:
		return _result64.Io
	}

	return nil
}

// Increment a cell by the ammount.
// Increments can be applied async if hbase.regionserver.thrift.coalesceIncrement is set to true.
// False is the default.  Turn to true if you need the extra performance and can accept some
// data loss if a thrift server dies with increments still in the queue.
//
// Parameters:
//  - Increment: The single increment to apply
func (p *HbaseClient) Increment(ctx context.Context, increment *TIncrement) (err error) {
	var _args65 HbaseIncrementArgs
	_args65.Increment = increment
	var _result66 HbaseIncrementResult
	if err = p.Client_().Call(ctx, "increment", &_args65, &_result66); err != nil {
		return
	}
	switch {
	case _result66.Io != nil:
		return _result66.Io
	}

	return nil
}

// Parameters:
//  - Increments: The list of increments
func (p *HbaseClient) IncrementRows(ctx context.Context, increments []*TIncrement) (err error) {
	var _args67 HbaseIncrementRowsArgs
	_args67.Increments = increments
	var _result68 HbaseIncrementRowsResult
	if err = p.Client_().Call(ctx, "incrementRows", &_args67, &_result68); err != nil {
		return
	}
	switch {
	case _result68.Io != nil:
		return _result68.Io
	}

	return nil
}

// Completely delete the row's cells marked with a timestamp
// equal-to or older than the passed timestamp.
//
// Parameters:
//  - TableName: name of table
//  - Row: key of the row to be completely deleted.
//  - Timestamp: timestamp
//  - Attributes: Delete attributes
func (p *HbaseClient) DeleteAllRowTs(ctx context.Context, tableName Text, row Text, timestamp int64, attributes map[string]Text) (err error) {
	var _args69 HbaseDeleteAllRowTsArgs
	_args69.TableName = tableName
	_args69.Row = row
	_args69.Timestamp = timestamp
	_args69.Attributes = attributes
	var _result70 HbaseDeleteAllRowTsResult
	if err = p.Client_().Call(ctx, "deleteAllRowTs", &_args69, &_result70); err != nil {
		return
	}
	switch {
	case _result70.Io != nil:
		return _result70.Io
	}

	return nil
}

// Get a scanner on the current table, using the Scan instance
// for the scan parameters.
//
// Parameters:
//  - TableName: name of table
//  - Scan: Scan instance
//  - Attributes: Scan attributes
func (p *HbaseClient) ScannerOpenWithScan(ctx context.Context, tableName Text, scan *TScan, attributes map[string]Text) (r ScannerID, err error) {
	var _args71 HbaseScannerOpenWithScanArgs
	_args71.TableName = tableName
	_args71.Scan = scan
	_args71.Attributes = attributes
	var _result72 HbaseScannerOpenWithScanResult
	if err = p.Client_().Call(ctx, "scannerOpenWithScan", &_args71, &_result72); err != nil {
		return
	}
	switch {
	case _result72.Io != nil:
		return r, _result72.Io
	}

	return _result72.GetSuccess(), nil
}

// Get a scanner on the current table starting at the specified row and
// ending at the last row in the table.  Return the specified columns.
//
// @return scanner id to be used with other scanner procedures
//
// Parameters:
//  - TableName: name of table
//  - StartRow: Starting row in table to scan.
// Send "" (empty string) to start at the first row.
//  - Columns: columns to scan. If column name is a column family, all
// columns of the specified column family are returned. It's also possible
// to pass a regex in the column qualifier.
//  - Attributes: Scan attributes
func (p *HbaseClient) ScannerOpen(ctx context.Context, tableName Text, startRow Text, columns []Text, attributes map[string]Text) (r ScannerID, err error) {
	var _args73 HbaseScannerOpenArgs
	_args73.TableName = tableName
	_args73.StartRow = startRow
	_args73.Columns = columns
	_args73.Attributes = attributes
	var _result74 HbaseScannerOpenResult
	if err = p.Client_().Call(ctx, "scannerOpen", &_args73, &_result74); err != nil {
		return
	}
	switch {
	case _result74.Io != nil:
		return r, _result74.Io
	}

	return _result74.GetSuccess(), nil
}

// Get a scanner on the current table starting and stopping at the
// specified rows.  ending at the last row in the table.  Return the
// specified columns.
//
// @return scanner id to be used with other scanner procedures
//
// Parameters:
//  - TableName: name of table
//  - StartRow: Starting row in table to scan.
// Send "" (empty string) to start at the first row.
//  - StopRow: row to stop scanning on. This row is *not* included in the
// scanner's results
//  - Columns: columns to scan. If column name is a column family, all
// columns of the specified column family are returned. It's also possible
// to pass a regex in the column qualifier.
//  - Attributes: Scan attributes
func (p *HbaseClient) ScannerOpenWithStop(ctx context.Context, tableName Text, startRow Text, stopRow Text, columns []Text, attributes map[string]Text) (r ScannerID, err error) {
	var _args75 HbaseScannerOpenWithStopArgs
	_args75.TableName = tableName
	_args75.StartRow = startRow
	_args75.StopRow = stopRow
	_args75.Columns = columns
	_args75.Attributes = attributes
	var _result76 HbaseScannerOpenWithStopResult
	if err = p.Client_().Call(ctx, "scannerOpenWithStop", &_args75, &_result76); err != nil {
		return
	}
	switch {
	case _result76.Io != nil:
		return r, _result76.Io
	}

	return _result76.GetSuccess(), nil
}

// Open a scanner for a given prefix.  That is all rows will have the specified
// prefix. No other rows will be returned.
//
// @return scanner id to use with other scanner calls
//
// Parameters:
//  - TableName: name of table
//  - StartAndPrefix: the prefix (and thus start row) of the keys you want
//  - Columns: the columns you want returned
//  - Attributes: Scan attributes
func (p *HbaseClient) ScannerOpenWithPrefix(ctx context.Context, tableName Text, startAndPrefix Text, columns []Text, attributes map[string]Text) (r ScannerID, err error) {
	var _args77 HbaseScannerOpenWithPrefixArgs
	_args77.TableName = tableName
	_args77.StartAndPrefix = startAndPrefix
	_args77.Columns = columns
	_args77.Attributes = attributes
	var _result78 HbaseScannerOpenWithPrefixResult
	if err = p.Client_().Call(ctx, "scannerOpenWithPrefix", &_args77, &_result78); err != nil {
		return
	}
	switch {
	case _result78.Io != nil:
		return r, _result78.Io
	}

	return _result78.GetSuccess(), nil
}

// Get a scanner on the current table starting at the specified row and
// ending at the last row in the table.  Return the specified columns.
// Only values with the specified timestamp are returned.
//
// @return scanner id to be used with other scanner procedures
//
// Parameters:
//  - TableName: name of table
//  - StartRow: Starting row in table to scan.
// Send "" (empty string) to start at the first row.
//  - Columns: columns to scan. If column name is a column family, all
// columns of the specified column family are returned. It's also possible
// to pass a regex in the column qualifier.
//  - Timestamp: timestamp
//  - Attributes: Scan attributes
func (p *HbaseClient) ScannerOpenTs(ctx context.Context, tableName Text, startRow Text, columns []Text, timestamp int64, attributes map[string]Text) (r ScannerID, err error) {
	var _args79 HbaseScannerOpenTsArgs
	_args79.TableName = tableName
	_args79.StartRow = startRow
	_args79.Columns = columns
	_args79.Timestamp = timestamp
	_args79.Attributes = attributes
	var _result80 HbaseScannerOpenTsResult
	if err = p.Client_().Call(ctx, "scannerOpenTs", &_args79, &_result80); err != nil {
		return
	}
	switch {
	case _result80.Io != nil:
		return r, _result80.Io
	}

	return _result80.GetSuccess(), nil
}

// Get a scanner on the current table starting and stopping at the
// specified rows.  ending at the last row in the table.  Return the
// specified columns.  Only values with the specified timestamp are
// returned.
//
// @return scanner id to be used with other scanner procedures
//
// Parameters:
//  - TableName: name of table
//  - StartRow: Starting row in table to scan.
// Send "" (empty string) to start at the first row.
//  - StopRow: row to stop scanning on. This row is *not* included in the
// scanner's results
//  - Columns: columns to scan. If column name is a column family, all
// columns of the specified column family are returned. It's also possible
// to pass a regex in the column qualifier.
//  - Timestamp: timestamp
//  - Attributes: Scan attributes
func (p *HbaseClient) ScannerOpenWithStopTs(ctx context.Context, tableName Text, startRow Text, stopRow Text, columns []Text, timestamp int64, attributes map[string]Text) (r ScannerID, err error) {
	var _args81 HbaseScannerOpenWithStopTsArgs
	_args81.TableName = tableName
	_args81.StartRow = startRow
	_args81.StopRow = stopRow
	_args81.Columns = columns
	_args81.Timestamp = timestamp
	_args81.Attributes = attributes
	var _result82 HbaseScannerOpenWithStopTsResult
	if err = p.Client_().Call(ctx, "scannerOpenWithStopTs", &_args81, &_result82); err != nil {
		return
	}
	switch {
	case _result82.Io != nil:
		return r, _result82.Io
	}

	return _result82.GetSuccess(), nil
}

// Returns the scanner's current row value and advances to the next
// row in the table.  When there are no more rows in the table, or a key
// greater-than-or-equal-to the scanner's specified stopRow is reached,
// an empty list is returned.
//
// @return a TRowResult containing the current row and a map of the columns to TCells.
//
// @throws IllegalArgument if ScannerID is invalid
//
// @throws NotFound when the scanner reaches the end
//
// Parameters:
//  - ID: id of a scanner returned by scannerOpen
func (p *HbaseClient) ScannerGet(ctx context.Context, id ScannerID) (r []*TRowResult_, err error) {
	var _args83 HbaseScannerGetArgs
	_args83.ID = id
	var _result84 HbaseScannerGetResult
	if err = p.Client_().Call(ctx, "scannerGet", &_args83, &_result84); err != nil {
		return
	}
	switch {
	case _result84.Io != nil:
		return r, _result84.Io
	case _result84.Ia != nil:
		return r, _result84.Ia
	}

	return _result84.GetSuccess(), nil
}

// Returns, starting at the scanner's current row value nbRows worth of
// rows and advances to the next row in the table.  When there are no more
// rows in the table, or a key greater-than-or-equal-to the scanner's
// specified stopRow is reached,  an empty list is returned.
//
// @return a TRowResult containing the current row and a map of the columns to TCells.
//
// @throws IllegalArgument if ScannerID is invalid
//
// @throws NotFound when the scanner reaches the end
//
// Parameters:
//  - ID: id of a scanner returned by scannerOpen
//  - NbRows: number of results to return
func (p *HbaseClient) ScannerGetList(ctx context.Context, id ScannerID, nbRows int32) (r []*TRowResult_, err error) {
	var _args85 HbaseScannerGetListArgs
	_args85.ID = id
	_args85.NbRows = nbRows
	var _result86 HbaseScannerGetListResult
	if err = p.Client_().Call(ctx, "scannerGetList", &_args85, &_result86); err != nil {
		return
	}
	switch {
	case _result86.Io != nil:
		return r, _result86.Io
	case _result86.Ia != nil:
		return r, _result86.Ia
	}

	return _result86.GetSuccess(), nil
}

// Closes the server-state associated with an open scanner.
//
// @throws IllegalArgument if ScannerID is invalid
//
// Parameters:
//  - ID: id of a scanner returned by scannerOpen
func (p *HbaseClient) ScannerClose(ctx context.Context, id ScannerID) (err error) {
	var _args87 HbaseScannerCloseArgs
	_args87.ID = id
	var _result88 HbaseScannerCloseResult
	if err = p.Client_().Call(ctx, "scannerClose", &_args87, &_result88); err != nil {
		return
	}
	switch {
	case _result88.Io != nil:
		return _result88.Io
	case _result88.Ia != nil:
		return _result88.Ia
	}

	return nil
}

// Get the row just before the specified one.
//
// @return value for specified row/column
//
// Parameters:
//  - TableName: name of table
//  - Row: row key
//  - Family: column name
func (p *HbaseClient) GetRowOrBefore(ctx context.Context, tableName Text, row Text, family Text) (r []*TCell, err error) {
	var _args89 HbaseGetRowOrBeforeArgs
	_args89.TableName = tableName
	_args89.Row = row
	_args89.Family = family
	var _result90 HbaseGetRowOrBeforeResult
	if err = p.Client_().Call(ctx, "getRowOrBefore", &_args89, &_result90); err != nil {
		return
	}
	switch {
	case _result90.Io != nil:
		return r, _result90.Io
	}

	return _result90.GetSuccess(), nil
}

// Get the regininfo for the specified row. It scans
// the metatable to find region's start and end keys.
//
// @return value for specified row/column
//
// Parameters:
//  - Row: row key
func (p *HbaseClient) GetRegionInfo(ctx context.Context, row Text) (r *TRegionInfo, err error) {
	var _args91 HbaseGetRegionInfoArgs
	_args91.Row = row
	var _result92 HbaseGetRegionInfoResult
	if err = p.Client_().Call(ctx, "getRegionInfo", &_args91, &_result92); err != nil {
		return
	}
	switch {
	case _result92.Io != nil:
		return r, _result92.Io
	}

	return _result92.GetSuccess(), nil
}

// Appends values to one or more columns within a single row.
//
// @return values of columns after the append operation.
//
// Parameters:
//  - Append: The single append operation to apply
func (p *HbaseClient) Append(ctx context.Context, append *TAppend) (r []*TCell, err error) {
	var _args93 HbaseAppendArgs
	_args93.Append = append
	var _result94 HbaseAppendResult
	if err = p.Client_().Call(ctx, "append", &_args93, &_result94); err != nil {
		return
	}
	switch {
	case _result94.Io != nil:
		return r, _result94.Io
	}

	return _result94.GetSuccess(), nil
}

// Atomically checks if a row/family/qualifier value matches the expected
// value. If it does, it adds the corresponding mutation operation for put.
//
// @return true if the new put was executed, false otherwise
//
// Parameters:
//  - TableName: name of table
//  - Row: row key
//  - Column: column name
//  - Value: the expected value for the column parameter, if not
// provided the check is for the non-existence of the
// column in question
//  - Mput: mutation for the put
//  - Attributes: Mutation attributes
func (p *HbaseClient) CheckAndPut(ctx context.Context, tableName Text, row Text, column Text, value Text, mput *Mutation, attributes map[string]Text) (r bool, err error) {
	var _args95 HbaseCheckAndPutArgs
	_args95.TableName = tableName
	_args95.Row = row
	_args95.Column = column
	_args95.Value = value
	_args95.Mput = mput
	_args95.Attributes = attributes
	var _result96 HbaseCheckAndPutResult
	if err = p.Client_().Call(ctx, "checkAndPut", &_args95, &_result96); err != nil {
		return
	}
	switch {
	case _result96.Io != nil:
		return r, _result96.Io
	case _result96.Ia != nil:
		return r, _result96.Ia
	}

	return _result96.GetSuccess(), nil
}

type HbaseProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Hbase
}

func (p *HbaseProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HbaseProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *HbaseProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHbaseProcessor(handler Hbase) *HbaseProcessor {

	self97 := &HbaseProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self97.processorMap["enableTable"] = &hbaseProcessorEnableTable{handler: handler}
	self97.processorMap["disableTable"] = &hbaseProcessorDisableTable{handler: handler}
	self97.processorMap["isTableEnabled"] = &hbaseProcessorIsTableEnabled{handler: handler}
	self97.processorMap["compact"] = &hbaseProcessorCompact{handler: handler}
	self97.processorMap["majorCompact"] = &hbaseProcessorMajorCompact{handler: handler}
	self97.processorMap["getTableNames"] = &hbaseProcessorGetTableNames{handler: handler}
	self97.processorMap["getColumnDescriptors"] = &hbaseProcessorGetColumnDescriptors{handler: handler}
	self97.processorMap["getTableRegions"] = &hbaseProcessorGetTableRegions{handler: handler}
	self97.processorMap["createTable"] = &hbaseProcessorCreateTable{handler: handler}
	self97.processorMap["deleteTable"] = &hbaseProcessorDeleteTable{handler: handler}
	self97.processorMap["get"] = &hbaseProcessorGet{handler: handler}
	self97.processorMap["getVer"] = &hbaseProcessorGetVer{handler: handler}
	self97.processorMap["getVerTs"] = &hbaseProcessorGetVerTs{handler: handler}
	self97.processorMap["getRow"] = &hbaseProcessorGetRow{handler: handler}
	self97.processorMap["getRowWithColumns"] = &hbaseProcessorGetRowWithColumns{handler: handler}
	self97.processorMap["getRowTs"] = &hbaseProcessorGetRowTs{handler: handler}
	self97.processorMap["getRowWithColumnsTs"] = &hbaseProcessorGetRowWithColumnsTs{handler: handler}
	self97.processorMap["getRows"] = &hbaseProcessorGetRows{handler: handler}
	self97.processorMap["getRowsWithColumns"] = &hbaseProcessorGetRowsWithColumns{handler: handler}
	self97.processorMap["getRowsTs"] = &hbaseProcessorGetRowsTs{handler: handler}
	self97.processorMap["getRowsWithColumnsTs"] = &hbaseProcessorGetRowsWithColumnsTs{handler: handler}
	self97.processorMap["mutateRow"] = &hbaseProcessorMutateRow{handler: handler}
	self97.processorMap["mutateRowTs"] = &hbaseProcessorMutateRowTs{handler: handler}
	self97.processorMap["mutateRows"] = &hbaseProcessorMutateRows{handler: handler}
	self97.processorMap["mutateRowsTs"] = &hbaseProcessorMutateRowsTs{handler: handler}
	self97.processorMap["atomicIncrement"] = &hbaseProcessorAtomicIncrement{handler: handler}
	self97.processorMap["deleteAll"] = &hbaseProcessorDeleteAll{handler: handler}
	self97.processorMap["deleteAllTs"] = &hbaseProcessorDeleteAllTs{handler: handler}
	self97.processorMap["deleteAllRow"] = &hbaseProcessorDeleteAllRow{handler: handler}
	self97.processorMap["increment"] = &hbaseProcessorIncrement{handler: handler}
	self97.processorMap["incrementRows"] = &hbaseProcessorIncrementRows{handler: handler}
	self97.processorMap["deleteAllRowTs"] = &hbaseProcessorDeleteAllRowTs{handler: handler}
	self97.processorMap["scannerOpenWithScan"] = &hbaseProcessorScannerOpenWithScan{handler: handler}
	self97.processorMap["scannerOpen"] = &hbaseProcessorScannerOpen{handler: handler}
	self97.processorMap["scannerOpenWithStop"] = &hbaseProcessorScannerOpenWithStop{handler: handler}
	self97.processorMap["scannerOpenWithPrefix"] = &hbaseProcessorScannerOpenWithPrefix{handler: handler}
	self97.processorMap["scannerOpenTs"] = &hbaseProcessorScannerOpenTs{handler: handler}
	self97.processorMap["scannerOpenWithStopTs"] = &hbaseProcessorScannerOpenWithStopTs{handler: handler}
	self97.processorMap["scannerGet"] = &hbaseProcessorScannerGet{handler: handler}
	self97.processorMap["scannerGetList"] = &hbaseProcessorScannerGetList{handler: handler}
	self97.processorMap["scannerClose"] = &hbaseProcessorScannerClose{handler: handler}
	self97.processorMap["getRowOrBefore"] = &hbaseProcessorGetRowOrBefore{handler: handler}
	self97.processorMap["getRegionInfo"] = &hbaseProcessorGetRegionInfo{handler: handler}
	self97.processorMap["append"] = &hbaseProcessorAppend{handler: handler}
	self97.processorMap["checkAndPut"] = &hbaseProcessorCheckAndPut{handler: handler}
	return self97
}

func (p *HbaseProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x98 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x98.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x98

}

type hbaseProcessorEnableTable struct {
	handler Hbase
}

func (p *hbaseProcessorEnableTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseEnableTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("enableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseEnableTableResult{}
	var err2 error
	if err2 = p.handler.EnableTable(ctx, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing enableTable: "+err2.Error())
			oprot.WriteMessageBegin("enableTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("enableTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDisableTable struct {
	handler Hbase
}

func (p *hbaseProcessorDisableTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseDisableTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("disableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseDisableTableResult{}
	var err2 error
	if err2 = p.handler.DisableTable(ctx, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disableTable: "+err2.Error())
			oprot.WriteMessageBegin("disableTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("disableTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorIsTableEnabled struct {
	handler Hbase
}

func (p *hbaseProcessorIsTableEnabled) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseIsTableEnabledArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isTableEnabled", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseIsTableEnabledResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.IsTableEnabled(ctx, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isTableEnabled: "+err2.Error())
			oprot.WriteMessageBegin("isTableEnabled", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("isTableEnabled", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorCompact struct {
	handler Hbase
}

func (p *hbaseProcessorCompact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseCompactArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("compact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseCompactResult{}
	var err2 error
	if err2 = p.handler.Compact(ctx, args.TableNameOrRegionName); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing compact: "+err2.Error())
			oprot.WriteMessageBegin("compact", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("compact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMajorCompact struct {
	handler Hbase
}

func (p *hbaseProcessorMajorCompact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseMajorCompactArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("majorCompact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseMajorCompactResult{}
	var err2 error
	if err2 = p.handler.MajorCompact(ctx, args.TableNameOrRegionName); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing majorCompact: "+err2.Error())
			oprot.WriteMessageBegin("majorCompact", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("majorCompact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetTableNames struct {
	handler Hbase
}

func (p *hbaseProcessorGetTableNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetTableNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTableNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetTableNamesResult{}
	var retval []Text
	var err2 error
	if retval, err2 = p.handler.GetTableNames(ctx); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableNames: "+err2.Error())
			oprot.WriteMessageBegin("getTableNames", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTableNames", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetColumnDescriptors struct {
	handler Hbase
}

func (p *hbaseProcessorGetColumnDescriptors) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetColumnDescriptorsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getColumnDescriptors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetColumnDescriptorsResult{}
	var retval map[string]*ColumnDescriptor
	var err2 error
	if retval, err2 = p.handler.GetColumnDescriptors(ctx, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getColumnDescriptors: "+err2.Error())
			oprot.WriteMessageBegin("getColumnDescriptors", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getColumnDescriptors", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetTableRegions struct {
	handler Hbase
}

func (p *hbaseProcessorGetTableRegions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetTableRegionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTableRegions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetTableRegionsResult{}
	var retval []*TRegionInfo
	var err2 error
	if retval, err2 = p.handler.GetTableRegions(ctx, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableRegions: "+err2.Error())
			oprot.WriteMessageBegin("getTableRegions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTableRegions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorCreateTable struct {
	handler Hbase
}

func (p *hbaseProcessorCreateTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseCreateTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseCreateTableResult{}
	var err2 error
	if err2 = p.handler.CreateTable(ctx, args.TableName, args.ColumnFamilies); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		case *IllegalArgument:
			result.Ia = v
		case *AlreadyExists:
			result.Exist = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTable: "+err2.Error())
			oprot.WriteMessageBegin("createTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("createTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteTable struct {
	handler Hbase
}

func (p *hbaseProcessorDeleteTable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseDeleteTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseDeleteTableResult{}
	var err2 error
	if err2 = p.handler.DeleteTable(ctx, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTable: "+err2.Error())
			oprot.WriteMessageBegin("deleteTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGet struct {
	handler Hbase
}

func (p *hbaseProcessorGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetResult{}
	var retval []*TCell
	var err2 error
	if retval, err2 = p.handler.Get(ctx, args.TableName, args.Row, args.Column, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: "+err2.Error())
			oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetVer struct {
	handler Hbase
}

func (p *hbaseProcessorGetVer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetVerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getVer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetVerResult{}
	var retval []*TCell
	var err2 error
	if retval, err2 = p.handler.GetVer(ctx, args.TableName, args.Row, args.Column, args.NumVersions, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVer: "+err2.Error())
			oprot.WriteMessageBegin("getVer", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getVer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetVerTs struct {
	handler Hbase
}

func (p *hbaseProcessorGetVerTs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetVerTsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getVerTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetVerTsResult{}
	var retval []*TCell
	var err2 error
	if retval, err2 = p.handler.GetVerTs(ctx, args.TableName, args.Row, args.Column, args.Timestamp, args.NumVersions, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVerTs: "+err2.Error())
			oprot.WriteMessageBegin("getVerTs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getVerTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRow struct {
	handler Hbase
}

func (p *hbaseProcessorGetRow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetRowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetRowResult{}
	var retval []*TRowResult_
	var err2 error
	if retval, err2 = p.handler.GetRow(ctx, args.TableName, args.Row, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRow: "+err2.Error())
			oprot.WriteMessageBegin("getRow", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowWithColumns struct {
	handler Hbase
}

func (p *hbaseProcessorGetRowWithColumns) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetRowWithColumnsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowWithColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetRowWithColumnsResult{}
	var retval []*TRowResult_
	var err2 error
	if retval, err2 = p.handler.GetRowWithColumns(ctx, args.TableName, args.Row, args.Columns, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowWithColumns: "+err2.Error())
			oprot.WriteMessageBegin("getRowWithColumns", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRowWithColumns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowTs struct {
	handler Hbase
}

func (p *hbaseProcessorGetRowTs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetRowTsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetRowTsResult{}
	var retval []*TRowResult_
	var err2 error
	if retval, err2 = p.handler.GetRowTs(ctx, args.TableName, args.Row, args.Timestamp, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowTs: "+err2.Error())
			oprot.WriteMessageBegin("getRowTs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRowTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowWithColumnsTs struct {
	handler Hbase
}

func (p *hbaseProcessorGetRowWithColumnsTs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetRowWithColumnsTsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetRowWithColumnsTsResult{}
	var retval []*TRowResult_
	var err2 error
	if retval, err2 = p.handler.GetRowWithColumnsTs(ctx, args.TableName, args.Row, args.Columns, args.Timestamp, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowWithColumnsTs: "+err2.Error())
			oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRows struct {
	handler Hbase
}

func (p *hbaseProcessorGetRows) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetRowsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetRowsResult{}
	var retval []*TRowResult_
	var err2 error
	if retval, err2 = p.handler.GetRows(ctx, args.TableName, args.Rows, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRows: "+err2.Error())
			oprot.WriteMessageBegin("getRows", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowsWithColumns struct {
	handler Hbase
}

func (p *hbaseProcessorGetRowsWithColumns) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetRowsWithColumnsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowsWithColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetRowsWithColumnsResult{}
	var retval []*TRowResult_
	var err2 error
	if retval, err2 = p.handler.GetRowsWithColumns(ctx, args.TableName, args.Rows, args.Columns, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsWithColumns: "+err2.Error())
			oprot.WriteMessageBegin("getRowsWithColumns", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRowsWithColumns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowsTs struct {
	handler Hbase
}

func (p *hbaseProcessorGetRowsTs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetRowsTsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetRowsTsResult{}
	var retval []*TRowResult_
	var err2 error
	if retval, err2 = p.handler.GetRowsTs(ctx, args.TableName, args.Rows, args.Timestamp, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsTs: "+err2.Error())
			oprot.WriteMessageBegin("getRowsTs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRowsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowsWithColumnsTs struct {
	handler Hbase
}

func (p *hbaseProcessorGetRowsWithColumnsTs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetRowsWithColumnsTsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetRowsWithColumnsTsResult{}
	var retval []*TRowResult_
	var err2 error
	if retval, err2 = p.handler.GetRowsWithColumnsTs(ctx, args.TableName, args.Rows, args.Columns, args.Timestamp, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsWithColumnsTs: "+err2.Error())
			oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRow struct {
	handler Hbase
}

func (p *hbaseProcessorMutateRow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseMutateRowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseMutateRowResult{}
	var err2 error
	if err2 = p.handler.MutateRow(ctx, args.TableName, args.Row, args.Mutations, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		case *IllegalArgument:
			result.Ia = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRow: "+err2.Error())
			oprot.WriteMessageBegin("mutateRow", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("mutateRow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRowTs struct {
	handler Hbase
}

func (p *hbaseProcessorMutateRowTs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseMutateRowTsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseMutateRowTsResult{}
	var err2 error
	if err2 = p.handler.MutateRowTs(ctx, args.TableName, args.Row, args.Mutations, args.Timestamp, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		case *IllegalArgument:
			result.Ia = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRowTs: "+err2.Error())
			oprot.WriteMessageBegin("mutateRowTs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("mutateRowTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRows struct {
	handler Hbase
}

func (p *hbaseProcessorMutateRows) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseMutateRowsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseMutateRowsResult{}
	var err2 error
	if err2 = p.handler.MutateRows(ctx, args.TableName, args.RowBatches, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		case *IllegalArgument:
			result.Ia = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRows: "+err2.Error())
			oprot.WriteMessageBegin("mutateRows", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("mutateRows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRowsTs struct {
	handler Hbase
}

func (p *hbaseProcessorMutateRowsTs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseMutateRowsTsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRowsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseMutateRowsTsResult{}
	var err2 error
	if err2 = p.handler.MutateRowsTs(ctx, args.TableName, args.RowBatches, args.Timestamp, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		case *IllegalArgument:
			result.Ia = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRowsTs: "+err2.Error())
			oprot.WriteMessageBegin("mutateRowsTs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("mutateRowsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorAtomicIncrement struct {
	handler Hbase
}

func (p *hbaseProcessorAtomicIncrement) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseAtomicIncrementArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("atomicIncrement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseAtomicIncrementResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.AtomicIncrement(ctx, args.TableName, args.Row, args.Column, args.Value); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		case *IllegalArgument:
			result.Ia = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing atomicIncrement: "+err2.Error())
			oprot.WriteMessageBegin("atomicIncrement", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("atomicIncrement", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAll struct {
	handler Hbase
}

func (p *hbaseProcessorDeleteAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseDeleteAllArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseDeleteAllResult{}
	var err2 error
	if err2 = p.handler.DeleteAll(ctx, args.TableName, args.Row, args.Column, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAll: "+err2.Error())
			oprot.WriteMessageBegin("deleteAll", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteAll", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAllTs struct {
	handler Hbase
}

func (p *hbaseProcessorDeleteAllTs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseDeleteAllTsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAllTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseDeleteAllTsResult{}
	var err2 error
	if err2 = p.handler.DeleteAllTs(ctx, args.TableName, args.Row, args.Column, args.Timestamp, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllTs: "+err2.Error())
			oprot.WriteMessageBegin("deleteAllTs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteAllTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAllRow struct {
	handler Hbase
}

func (p *hbaseProcessorDeleteAllRow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseDeleteAllRowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAllRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseDeleteAllRowResult{}
	var err2 error
	if err2 = p.handler.DeleteAllRow(ctx, args.TableName, args.Row, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllRow: "+err2.Error())
			oprot.WriteMessageBegin("deleteAllRow", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteAllRow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorIncrement struct {
	handler Hbase
}

func (p *hbaseProcessorIncrement) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseIncrementArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("increment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseIncrementResult{}
	var err2 error
	if err2 = p.handler.Increment(ctx, args.Increment); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing increment: "+err2.Error())
			oprot.WriteMessageBegin("increment", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("increment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorIncrementRows struct {
	handler Hbase
}

func (p *hbaseProcessorIncrementRows) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseIncrementRowsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("incrementRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseIncrementRowsResult{}
	var err2 error
	if err2 = p.handler.IncrementRows(ctx, args.Increments); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incrementRows: "+err2.Error())
			oprot.WriteMessageBegin("incrementRows", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("incrementRows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAllRowTs struct {
	handler Hbase
}

func (p *hbaseProcessorDeleteAllRowTs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseDeleteAllRowTsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAllRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseDeleteAllRowTsResult{}
	var err2 error
	if err2 = p.handler.DeleteAllRowTs(ctx, args.TableName, args.Row, args.Timestamp, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllRowTs: "+err2.Error())
			oprot.WriteMessageBegin("deleteAllRowTs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteAllRowTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithScan struct {
	handler Hbase
}

func (p *hbaseProcessorScannerOpenWithScan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseScannerOpenWithScanArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithScan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseScannerOpenWithScanResult{}
	var retval ScannerID
	var err2 error
	if retval, err2 = p.handler.ScannerOpenWithScan(ctx, args.TableName, args.Scan, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithScan: "+err2.Error())
			oprot.WriteMessageBegin("scannerOpenWithScan", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("scannerOpenWithScan", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpen struct {
	handler Hbase
}

func (p *hbaseProcessorScannerOpen) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseScannerOpenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpen", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseScannerOpenResult{}
	var retval ScannerID
	var err2 error
	if retval, err2 = p.handler.ScannerOpen(ctx, args.TableName, args.StartRow, args.Columns, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpen: "+err2.Error())
			oprot.WriteMessageBegin("scannerOpen", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("scannerOpen", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithStop struct {
	handler Hbase
}

func (p *hbaseProcessorScannerOpenWithStop) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseScannerOpenWithStopArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithStop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseScannerOpenWithStopResult{}
	var retval ScannerID
	var err2 error
	if retval, err2 = p.handler.ScannerOpenWithStop(ctx, args.TableName, args.StartRow, args.StopRow, args.Columns, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithStop: "+err2.Error())
			oprot.WriteMessageBegin("scannerOpenWithStop", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("scannerOpenWithStop", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithPrefix struct {
	handler Hbase
}

func (p *hbaseProcessorScannerOpenWithPrefix) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseScannerOpenWithPrefixArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseScannerOpenWithPrefixResult{}
	var retval ScannerID
	var err2 error
	if retval, err2 = p.handler.ScannerOpenWithPrefix(ctx, args.TableName, args.StartAndPrefix, args.Columns, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithPrefix: "+err2.Error())
			oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenTs struct {
	handler Hbase
}

func (p *hbaseProcessorScannerOpenTs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseScannerOpenTsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseScannerOpenTsResult{}
	var retval ScannerID
	var err2 error
	if retval, err2 = p.handler.ScannerOpenTs(ctx, args.TableName, args.StartRow, args.Columns, args.Timestamp, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenTs: "+err2.Error())
			oprot.WriteMessageBegin("scannerOpenTs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("scannerOpenTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithStopTs struct {
	handler Hbase
}

func (p *hbaseProcessorScannerOpenWithStopTs) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseScannerOpenWithStopTsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseScannerOpenWithStopTsResult{}
	var retval ScannerID
	var err2 error
	if retval, err2 = p.handler.ScannerOpenWithStopTs(ctx, args.TableName, args.StartRow, args.StopRow, args.Columns, args.Timestamp, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithStopTs: "+err2.Error())
			oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerGet struct {
	handler Hbase
}

func (p *hbaseProcessorScannerGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseScannerGetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerGet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseScannerGetResult{}
	var retval []*TRowResult_
	var err2 error
	if retval, err2 = p.handler.ScannerGet(ctx, args.ID); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		case *IllegalArgument:
			result.Ia = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerGet: "+err2.Error())
			oprot.WriteMessageBegin("scannerGet", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("scannerGet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerGetList struct {
	handler Hbase
}

func (p *hbaseProcessorScannerGetList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseScannerGetListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerGetList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseScannerGetListResult{}
	var retval []*TRowResult_
	var err2 error
	if retval, err2 = p.handler.ScannerGetList(ctx, args.ID, args.NbRows); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		case *IllegalArgument:
			result.Ia = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerGetList: "+err2.Error())
			oprot.WriteMessageBegin("scannerGetList", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("scannerGetList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerClose struct {
	handler Hbase
}

func (p *hbaseProcessorScannerClose) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseScannerCloseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerClose", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseScannerCloseResult{}
	var err2 error
	if err2 = p.handler.ScannerClose(ctx, args.ID); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		case *IllegalArgument:
			result.Ia = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerClose: "+err2.Error())
			oprot.WriteMessageBegin("scannerClose", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("scannerClose", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowOrBefore struct {
	handler Hbase
}

func (p *hbaseProcessorGetRowOrBefore) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetRowOrBeforeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowOrBefore", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetRowOrBeforeResult{}
	var retval []*TCell
	var err2 error
	if retval, err2 = p.handler.GetRowOrBefore(ctx, args.TableName, args.Row, args.Family); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowOrBefore: "+err2.Error())
			oprot.WriteMessageBegin("getRowOrBefore", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRowOrBefore", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRegionInfo struct {
	handler Hbase
}

func (p *hbaseProcessorGetRegionInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseGetRegionInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRegionInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseGetRegionInfoResult{}
	var retval *TRegionInfo
	var err2 error
	if retval, err2 = p.handler.GetRegionInfo(ctx, args.Row); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRegionInfo: "+err2.Error())
			oprot.WriteMessageBegin("getRegionInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRegionInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorAppend struct {
	handler Hbase
}

func (p *hbaseProcessorAppend) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseAppendArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("append", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseAppendResult{}
	var retval []*TCell
	var err2 error
	if retval, err2 = p.handler.Append(ctx, args.Append); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing append: "+err2.Error())
			oprot.WriteMessageBegin("append", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("append", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorCheckAndPut struct {
	handler Hbase
}

func (p *hbaseProcessorCheckAndPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HbaseCheckAndPutArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkAndPut", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HbaseCheckAndPutResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.CheckAndPut(ctx, args.TableName, args.Row, args.Column, args.Value, args.Mput, args.Attributes); err2 != nil {
		switch v := err2.(type) {
		case *IOError:
			result.Io = v
		case *IllegalArgument:
			result.Ia = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkAndPut: "+err2.Error())
			oprot.WriteMessageBegin("checkAndPut", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("checkAndPut", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TableName: name of the table
type HbaseEnableTableArgs struct {
	TableName Bytes `thrift:"tableName,1" db:"tableName" json:"tableName"`
}

func NewHbaseEnableTableArgs() *HbaseEnableTableArgs {
	return &HbaseEnableTableArgs{}
}

func (p *HbaseEnableTableArgs) GetTableName() Bytes {
	return p.TableName
}
func (p *HbaseEnableTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseEnableTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Bytes(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseEnableTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("enableTable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseEnableTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseEnableTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseEnableTableArgs(%+v)", *p)
}

// Attributes:
//  - Io
type HbaseEnableTableResult struct {
	Io *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseEnableTableResult() *HbaseEnableTableResult {
	return &HbaseEnableTableResult{}
}

var HbaseEnableTableResult_Io_DEFAULT *IOError

func (p *HbaseEnableTableResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseEnableTableResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseEnableTableResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseEnableTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseEnableTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseEnableTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("enableTable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseEnableTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseEnableTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseEnableTableResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of the table
type HbaseDisableTableArgs struct {
	TableName Bytes `thrift:"tableName,1" db:"tableName" json:"tableName"`
}

func NewHbaseDisableTableArgs() *HbaseDisableTableArgs {
	return &HbaseDisableTableArgs{}
}

func (p *HbaseDisableTableArgs) GetTableName() Bytes {
	return p.TableName
}
func (p *HbaseDisableTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseDisableTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Bytes(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseDisableTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("disableTable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseDisableTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseDisableTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseDisableTableArgs(%+v)", *p)
}

// Attributes:
//  - Io
type HbaseDisableTableResult struct {
	Io *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseDisableTableResult() *HbaseDisableTableResult {
	return &HbaseDisableTableResult{}
}

var HbaseDisableTableResult_Io_DEFAULT *IOError

func (p *HbaseDisableTableResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseDisableTableResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseDisableTableResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseDisableTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseDisableTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseDisableTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("disableTable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseDisableTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseDisableTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseDisableTableResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of the table to check
type HbaseIsTableEnabledArgs struct {
	TableName Bytes `thrift:"tableName,1" db:"tableName" json:"tableName"`
}

func NewHbaseIsTableEnabledArgs() *HbaseIsTableEnabledArgs {
	return &HbaseIsTableEnabledArgs{}
}

func (p *HbaseIsTableEnabledArgs) GetTableName() Bytes {
	return p.TableName
}
func (p *HbaseIsTableEnabledArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseIsTableEnabledArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Bytes(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseIsTableEnabledArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isTableEnabled_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseIsTableEnabledArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseIsTableEnabledArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseIsTableEnabledArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseIsTableEnabledResult struct {
	Success *bool    `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseIsTableEnabledResult() *HbaseIsTableEnabledResult {
	return &HbaseIsTableEnabledResult{}
}

var HbaseIsTableEnabledResult_Success_DEFAULT bool

func (p *HbaseIsTableEnabledResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return HbaseIsTableEnabledResult_Success_DEFAULT
	}
	return *p.Success
}

var HbaseIsTableEnabledResult_Io_DEFAULT *IOError

func (p *HbaseIsTableEnabledResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseIsTableEnabledResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseIsTableEnabledResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseIsTableEnabledResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseIsTableEnabledResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseIsTableEnabledResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *HbaseIsTableEnabledResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseIsTableEnabledResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("isTableEnabled_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseIsTableEnabledResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseIsTableEnabledResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseIsTableEnabledResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseIsTableEnabledResult(%+v)", *p)
}

// Attributes:
//  - TableNameOrRegionName
type HbaseCompactArgs struct {
	TableNameOrRegionName Bytes `thrift:"tableNameOrRegionName,1" db:"tableNameOrRegionName" json:"tableNameOrRegionName"`
}

func NewHbaseCompactArgs() *HbaseCompactArgs {
	return &HbaseCompactArgs{}
}

func (p *HbaseCompactArgs) GetTableNameOrRegionName() Bytes {
	return p.TableNameOrRegionName
}
func (p *HbaseCompactArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseCompactArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Bytes(v)
		p.TableNameOrRegionName = temp
	}
	return nil
}

func (p *HbaseCompactArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("compact_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseCompactArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableNameOrRegionName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableNameOrRegionName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableNameOrRegionName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableNameOrRegionName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableNameOrRegionName: ", p), err)
	}
	return err
}

func (p *HbaseCompactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseCompactArgs(%+v)", *p)
}

// Attributes:
//  - Io
type HbaseCompactResult struct {
	Io *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseCompactResult() *HbaseCompactResult {
	return &HbaseCompactResult{}
}

var HbaseCompactResult_Io_DEFAULT *IOError

func (p *HbaseCompactResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseCompactResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseCompactResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseCompactResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseCompactResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseCompactResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("compact_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseCompactResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseCompactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseCompactResult(%+v)", *p)
}

// Attributes:
//  - TableNameOrRegionName
type HbaseMajorCompactArgs struct {
	TableNameOrRegionName Bytes `thrift:"tableNameOrRegionName,1" db:"tableNameOrRegionName" json:"tableNameOrRegionName"`
}

func NewHbaseMajorCompactArgs() *HbaseMajorCompactArgs {
	return &HbaseMajorCompactArgs{}
}

func (p *HbaseMajorCompactArgs) GetTableNameOrRegionName() Bytes {
	return p.TableNameOrRegionName
}
func (p *HbaseMajorCompactArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseMajorCompactArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Bytes(v)
		p.TableNameOrRegionName = temp
	}
	return nil
}

func (p *HbaseMajorCompactArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("majorCompact_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseMajorCompactArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableNameOrRegionName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableNameOrRegionName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableNameOrRegionName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableNameOrRegionName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableNameOrRegionName: ", p), err)
	}
	return err
}

func (p *HbaseMajorCompactArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseMajorCompactArgs(%+v)", *p)
}

// Attributes:
//  - Io
type HbaseMajorCompactResult struct {
	Io *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseMajorCompactResult() *HbaseMajorCompactResult {
	return &HbaseMajorCompactResult{}
}

var HbaseMajorCompactResult_Io_DEFAULT *IOError

func (p *HbaseMajorCompactResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseMajorCompactResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseMajorCompactResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseMajorCompactResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseMajorCompactResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseMajorCompactResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("majorCompact_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseMajorCompactResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseMajorCompactResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseMajorCompactResult(%+v)", *p)
}

type HbaseGetTableNamesArgs struct {
}

func NewHbaseGetTableNamesArgs() *HbaseGetTableNamesArgs {
	return &HbaseGetTableNamesArgs{}
}

func (p *HbaseGetTableNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetTableNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTableNames_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetTableNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetTableNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetTableNamesResult struct {
	Success []Text   `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetTableNamesResult() *HbaseGetTableNamesResult {
	return &HbaseGetTableNamesResult{}
}

var HbaseGetTableNamesResult_Success_DEFAULT []Text

func (p *HbaseGetTableNamesResult) GetSuccess() []Text {
	return p.Success
}

var HbaseGetTableNamesResult_Io_DEFAULT *IOError

func (p *HbaseGetTableNamesResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetTableNamesResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetTableNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetTableNamesResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetTableNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetTableNamesResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem99 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem99 = temp
		}
		p.Success = append(p.Success, _elem99)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetTableNamesResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetTableNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTableNames_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetTableNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteBinary(v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetTableNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetTableNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetTableNamesResult(%+v)", *p)
}

// Attributes:
//  - TableName: table name
type HbaseGetColumnDescriptorsArgs struct {
	TableName Text `thrift:"tableName,1" db:"tableName" json:"tableName"`
}

func NewHbaseGetColumnDescriptorsArgs() *HbaseGetColumnDescriptorsArgs {
	return &HbaseGetColumnDescriptorsArgs{}
}

func (p *HbaseGetColumnDescriptorsArgs) GetTableName() Text {
	return p.TableName
}
func (p *HbaseGetColumnDescriptorsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetColumnDescriptorsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseGetColumnDescriptorsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getColumnDescriptors_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetColumnDescriptorsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseGetColumnDescriptorsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetColumnDescriptorsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetColumnDescriptorsResult struct {
	Success map[string]*ColumnDescriptor `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError                     `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetColumnDescriptorsResult() *HbaseGetColumnDescriptorsResult {
	return &HbaseGetColumnDescriptorsResult{}
}

var HbaseGetColumnDescriptorsResult_Success_DEFAULT map[string]*ColumnDescriptor

func (p *HbaseGetColumnDescriptorsResult) GetSuccess() map[string]*ColumnDescriptor {
	return p.Success
}

var HbaseGetColumnDescriptorsResult_Io_DEFAULT *IOError

func (p *HbaseGetColumnDescriptorsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetColumnDescriptorsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetColumnDescriptorsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetColumnDescriptorsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetColumnDescriptorsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetColumnDescriptorsResult) ReadField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*ColumnDescriptor, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key100 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key100 = string(temp)
		}
		_val101 := &ColumnDescriptor{
			MaxVersions: 3,

			Compression: "NONE",

			BloomFilterType: "NONE",

			TimeToLive: 2147483647,
		}
		if err := _val101.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val101), err)
		}
		p.Success[_key100] = _val101
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseGetColumnDescriptorsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetColumnDescriptorsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getColumnDescriptors_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetColumnDescriptorsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetColumnDescriptorsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetColumnDescriptorsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetColumnDescriptorsResult(%+v)", *p)
}

// Attributes:
//  - TableName: table name
type HbaseGetTableRegionsArgs struct {
	TableName Text `thrift:"tableName,1" db:"tableName" json:"tableName"`
}

func NewHbaseGetTableRegionsArgs() *HbaseGetTableRegionsArgs {
	return &HbaseGetTableRegionsArgs{}
}

func (p *HbaseGetTableRegionsArgs) GetTableName() Text {
	return p.TableName
}
func (p *HbaseGetTableRegionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetTableRegionsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseGetTableRegionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTableRegions_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetTableRegionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseGetTableRegionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetTableRegionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetTableRegionsResult struct {
	Success []*TRegionInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError       `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetTableRegionsResult() *HbaseGetTableRegionsResult {
	return &HbaseGetTableRegionsResult{}
}

var HbaseGetTableRegionsResult_Success_DEFAULT []*TRegionInfo

func (p *HbaseGetTableRegionsResult) GetSuccess() []*TRegionInfo {
	return p.Success
}

var HbaseGetTableRegionsResult_Io_DEFAULT *IOError

func (p *HbaseGetTableRegionsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetTableRegionsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetTableRegionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetTableRegionsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetTableRegionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetTableRegionsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRegionInfo, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem102 := &TRegionInfo{}
		if err := _elem102.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem102), err)
		}
		p.Success = append(p.Success, _elem102)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetTableRegionsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetTableRegionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTableRegions_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetTableRegionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetTableRegionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetTableRegionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetTableRegionsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table to create
//  - ColumnFamilies: list of column family descriptors
type HbaseCreateTableArgs struct {
	TableName      Text                `thrift:"tableName,1" db:"tableName" json:"tableName"`
	ColumnFamilies []*ColumnDescriptor `thrift:"columnFamilies,2" db:"columnFamilies" json:"columnFamilies"`
}

func NewHbaseCreateTableArgs() *HbaseCreateTableArgs {
	return &HbaseCreateTableArgs{}
}

func (p *HbaseCreateTableArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseCreateTableArgs) GetColumnFamilies() []*ColumnDescriptor {
	return p.ColumnFamilies
}
func (p *HbaseCreateTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseCreateTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseCreateTableArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ColumnDescriptor, 0, size)
	p.ColumnFamilies = tSlice
	for i := 0; i < size; i++ {
		_elem103 := &ColumnDescriptor{
			MaxVersions: 3,

			Compression: "NONE",

			BloomFilterType: "NONE",

			TimeToLive: 2147483647,
		}
		if err := _elem103.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem103), err)
		}
		p.ColumnFamilies = append(p.ColumnFamilies, _elem103)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseCreateTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseCreateTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseCreateTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columnFamilies", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:columnFamilies: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnFamilies)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ColumnFamilies {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:columnFamilies: ", p), err)
	}
	return err
}

func (p *HbaseCreateTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseCreateTableArgs(%+v)", *p)
}

// Attributes:
//  - Io
//  - Ia
//  - Exist
type HbaseCreateTableResult struct {
	Io    *IOError         `thrift:"io,1" db:"io" json:"io,omitempty"`
	Ia    *IllegalArgument `thrift:"ia,2" db:"ia" json:"ia,omitempty"`
	Exist *AlreadyExists   `thrift:"exist,3" db:"exist" json:"exist,omitempty"`
}

func NewHbaseCreateTableResult() *HbaseCreateTableResult {
	return &HbaseCreateTableResult{}
}

var HbaseCreateTableResult_Io_DEFAULT *IOError

func (p *HbaseCreateTableResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseCreateTableResult_Io_DEFAULT
	}
	return p.Io
}

var HbaseCreateTableResult_Ia_DEFAULT *IllegalArgument

func (p *HbaseCreateTableResult) GetIa() *IllegalArgument {
	if !p.IsSetIa() {
		return HbaseCreateTableResult_Ia_DEFAULT
	}
	return p.Ia
}

var HbaseCreateTableResult_Exist_DEFAULT *AlreadyExists

func (p *HbaseCreateTableResult) GetExist() *AlreadyExists {
	if !p.IsSetExist() {
		return HbaseCreateTableResult_Exist_DEFAULT
	}
	return p.Exist
}
func (p *HbaseCreateTableResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseCreateTableResult) IsSetIa() bool {
	return p.Ia != nil
}

func (p *HbaseCreateTableResult) IsSetExist() bool {
	return p.Exist != nil
}

func (p *HbaseCreateTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseCreateTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseCreateTableResult) ReadField2(iprot thrift.TProtocol) error {
	p.Ia = &IllegalArgument{}
	if err := p.Ia.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ia), err)
	}
	return nil
}

func (p *HbaseCreateTableResult) ReadField3(iprot thrift.TProtocol) error {
	p.Exist = &AlreadyExists{}
	if err := p.Exist.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Exist), err)
	}
	return nil
}

func (p *HbaseCreateTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseCreateTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseCreateTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIa() {
		if err := oprot.WriteFieldBegin("ia", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ia: ", p), err)
		}
		if err := p.Ia.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ia), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ia: ", p), err)
		}
	}
	return err
}

func (p *HbaseCreateTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExist() {
		if err := oprot.WriteFieldBegin("exist", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:exist: ", p), err)
		}
		if err := p.Exist.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Exist), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:exist: ", p), err)
		}
	}
	return err
}

func (p *HbaseCreateTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseCreateTableResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table to delete
type HbaseDeleteTableArgs struct {
	TableName Text `thrift:"tableName,1" db:"tableName" json:"tableName"`
}

func NewHbaseDeleteTableArgs() *HbaseDeleteTableArgs {
	return &HbaseDeleteTableArgs{}
}

func (p *HbaseDeleteTableArgs) GetTableName() Text {
	return p.TableName
}
func (p *HbaseDeleteTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseDeleteTableArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseDeleteTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseDeleteTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseDeleteTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseDeleteTableArgs(%+v)", *p)
}

// Attributes:
//  - Io
type HbaseDeleteTableResult struct {
	Io *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseDeleteTableResult() *HbaseDeleteTableResult {
	return &HbaseDeleteTableResult{}
}

var HbaseDeleteTableResult_Io_DEFAULT *IOError

func (p *HbaseDeleteTableResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseDeleteTableResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseDeleteTableResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseDeleteTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseDeleteTableResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseDeleteTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseDeleteTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseDeleteTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseDeleteTableResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: row key
//  - Column: column name
//  - Attributes: Get attributes
type HbaseGetArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row        Text            `thrift:"row,2" db:"row" json:"row"`
	Column     Text            `thrift:"column,3" db:"column" json:"column"`
	Attributes map[string]Text `thrift:"attributes,4" db:"attributes" json:"attributes"`
}

func NewHbaseGetArgs() *HbaseGetArgs {
	return &HbaseGetArgs{}
}

func (p *HbaseGetArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseGetArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseGetArgs) GetColumn() Text {
	return p.Column
}

func (p *HbaseGetArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseGetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseGetArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseGetArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Text(v)
		p.Column = temp
	}
	return nil
}

func (p *HbaseGetArgs) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key104 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key104 = string(temp)
		}
		var _val105 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val105 = temp
		}
		p.Attributes[_key104] = _val105
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseGetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseGetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseGetArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column: ", p), err)
	}
	if err := oprot.WriteBinary(p.Column); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.column (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column: ", p), err)
	}
	return err
}

func (p *HbaseGetArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributes: ", p), err)
	}
	return err
}

func (p *HbaseGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetResult struct {
	Success []*TCell `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetResult() *HbaseGetResult {
	return &HbaseGetResult{}
}

var HbaseGetResult_Success_DEFAULT []*TCell

func (p *HbaseGetResult) GetSuccess() []*TCell {
	return p.Success
}

var HbaseGetResult_Io_DEFAULT *IOError

func (p *HbaseGetResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TCell, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem106 := &TCell{}
		if err := _elem106.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem106), err)
		}
		p.Success = append(p.Success, _elem106)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: row key
//  - Column: column name
//  - NumVersions: number of versions to retrieve
//  - Attributes: Get attributes
type HbaseGetVerArgs struct {
	TableName   Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row         Text            `thrift:"row,2" db:"row" json:"row"`
	Column      Text            `thrift:"column,3" db:"column" json:"column"`
	NumVersions int32           `thrift:"numVersions,4" db:"numVersions" json:"numVersions"`
	Attributes  map[string]Text `thrift:"attributes,5" db:"attributes" json:"attributes"`
}

func NewHbaseGetVerArgs() *HbaseGetVerArgs {
	return &HbaseGetVerArgs{}
}

func (p *HbaseGetVerArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseGetVerArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseGetVerArgs) GetColumn() Text {
	return p.Column
}

func (p *HbaseGetVerArgs) GetNumVersions() int32 {
	return p.NumVersions
}

func (p *HbaseGetVerArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseGetVerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetVerArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseGetVerArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseGetVerArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Text(v)
		p.Column = temp
	}
	return nil
}

func (p *HbaseGetVerArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NumVersions = v
	}
	return nil
}

func (p *HbaseGetVerArgs) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key107 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key107 = string(temp)
		}
		var _val108 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val108 = temp
		}
		p.Attributes[_key107] = _val108
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseGetVerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getVer_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetVerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseGetVerArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseGetVerArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column: ", p), err)
	}
	if err := oprot.WriteBinary(p.Column); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.column (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column: ", p), err)
	}
	return err
}

func (p *HbaseGetVerArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numVersions", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:numVersions: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NumVersions)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.numVersions (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:numVersions: ", p), err)
	}
	return err
}

func (p *HbaseGetVerArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:attributes: ", p), err)
	}
	return err
}

func (p *HbaseGetVerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetVerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetVerResult struct {
	Success []*TCell `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetVerResult() *HbaseGetVerResult {
	return &HbaseGetVerResult{}
}

var HbaseGetVerResult_Success_DEFAULT []*TCell

func (p *HbaseGetVerResult) GetSuccess() []*TCell {
	return p.Success
}

var HbaseGetVerResult_Io_DEFAULT *IOError

func (p *HbaseGetVerResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetVerResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetVerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetVerResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetVerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetVerResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TCell, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem109 := &TCell{}
		if err := _elem109.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem109), err)
		}
		p.Success = append(p.Success, _elem109)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetVerResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetVerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getVer_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetVerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetVerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetVerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetVerResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: row key
//  - Column: column name
//  - Timestamp: timestamp
//  - NumVersions: number of versions to retrieve
//  - Attributes: Get attributes
type HbaseGetVerTsArgs struct {
	TableName   Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row         Text            `thrift:"row,2" db:"row" json:"row"`
	Column      Text            `thrift:"column,3" db:"column" json:"column"`
	Timestamp   int64           `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
	NumVersions int32           `thrift:"numVersions,5" db:"numVersions" json:"numVersions"`
	Attributes  map[string]Text `thrift:"attributes,6" db:"attributes" json:"attributes"`
}

func NewHbaseGetVerTsArgs() *HbaseGetVerTsArgs {
	return &HbaseGetVerTsArgs{}
}

func (p *HbaseGetVerTsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseGetVerTsArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseGetVerTsArgs) GetColumn() Text {
	return p.Column
}

func (p *HbaseGetVerTsArgs) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *HbaseGetVerTsArgs) GetNumVersions() int32 {
	return p.NumVersions
}

func (p *HbaseGetVerTsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseGetVerTsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetVerTsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseGetVerTsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseGetVerTsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Text(v)
		p.Column = temp
	}
	return nil
}

func (p *HbaseGetVerTsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *HbaseGetVerTsArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NumVersions = v
	}
	return nil
}

func (p *HbaseGetVerTsArgs) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key110 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key110 = string(temp)
		}
		var _val111 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val111 = temp
		}
		p.Attributes[_key110] = _val111
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseGetVerTsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getVerTs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetVerTsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseGetVerTsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseGetVerTsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column: ", p), err)
	}
	if err := oprot.WriteBinary(p.Column); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.column (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column: ", p), err)
	}
	return err
}

func (p *HbaseGetVerTsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err)
	}
	return err
}

func (p *HbaseGetVerTsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("numVersions", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:numVersions: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NumVersions)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.numVersions (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:numVersions: ", p), err)
	}
	return err
}

func (p *HbaseGetVerTsArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:attributes: ", p), err)
	}
	return err
}

func (p *HbaseGetVerTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetVerTsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetVerTsResult struct {
	Success []*TCell `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetVerTsResult() *HbaseGetVerTsResult {
	return &HbaseGetVerTsResult{}
}

var HbaseGetVerTsResult_Success_DEFAULT []*TCell

func (p *HbaseGetVerTsResult) GetSuccess() []*TCell {
	return p.Success
}

var HbaseGetVerTsResult_Io_DEFAULT *IOError

func (p *HbaseGetVerTsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetVerTsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetVerTsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetVerTsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetVerTsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetVerTsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TCell, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem112 := &TCell{}
		if err := _elem112.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem112), err)
		}
		p.Success = append(p.Success, _elem112)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetVerTsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetVerTsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getVerTs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetVerTsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetVerTsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetVerTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetVerTsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: row key
//  - Attributes: Get attributes
type HbaseGetRowArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row        Text            `thrift:"row,2" db:"row" json:"row"`
	Attributes map[string]Text `thrift:"attributes,3" db:"attributes" json:"attributes"`
}

func NewHbaseGetRowArgs() *HbaseGetRowArgs {
	return &HbaseGetRowArgs{}
}

func (p *HbaseGetRowArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseGetRowArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseGetRowArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseGetRowArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseGetRowArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseGetRowArgs) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key113 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key113 = string(temp)
		}
		var _val114 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val114 = temp
		}
		p.Attributes[_key113] = _val114
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseGetRowArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRow_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseGetRowArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseGetRowArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:attributes: ", p), err)
	}
	return err
}

func (p *HbaseGetRowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetRowResult struct {
	Success []*TRowResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError       `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetRowResult() *HbaseGetRowResult {
	return &HbaseGetRowResult{}
}

var HbaseGetRowResult_Success_DEFAULT []*TRowResult_

func (p *HbaseGetRowResult) GetSuccess() []*TRowResult_ {
	return p.Success
}

var HbaseGetRowResult_Io_DEFAULT *IOError

func (p *HbaseGetRowResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetRowResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetRowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetRowResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetRowResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRowResult_, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem115 := &TRowResult_{}
		if err := _elem115.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem115), err)
		}
		p.Success = append(p.Success, _elem115)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetRowResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRow_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: row key
//  - Columns: List of columns to return, null for all columns
//  - Attributes: Get attributes
type HbaseGetRowWithColumnsArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row        Text            `thrift:"row,2" db:"row" json:"row"`
	Columns    []Text          `thrift:"columns,3" db:"columns" json:"columns"`
	Attributes map[string]Text `thrift:"attributes,4" db:"attributes" json:"attributes"`
}

func NewHbaseGetRowWithColumnsArgs() *HbaseGetRowWithColumnsArgs {
	return &HbaseGetRowWithColumnsArgs{}
}

func (p *HbaseGetRowWithColumnsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseGetRowWithColumnsArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseGetRowWithColumnsArgs) GetColumns() []Text {
	return p.Columns
}

func (p *HbaseGetRowWithColumnsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseGetRowWithColumnsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseGetRowWithColumnsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseGetRowWithColumnsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		var _elem116 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem116 = temp
		}
		p.Columns = append(p.Columns, _elem116)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsArgs) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key117 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key117 = string(temp)
		}
		var _val118 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val118 = temp
		}
		p.Attributes[_key117] = _val118
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowWithColumns_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseGetRowWithColumnsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseGetRowWithColumnsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Columns {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err)
	}
	return err
}

func (p *HbaseGetRowWithColumnsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributes: ", p), err)
	}
	return err
}

func (p *HbaseGetRowWithColumnsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowWithColumnsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetRowWithColumnsResult struct {
	Success []*TRowResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError       `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetRowWithColumnsResult() *HbaseGetRowWithColumnsResult {
	return &HbaseGetRowWithColumnsResult{}
}

var HbaseGetRowWithColumnsResult_Success_DEFAULT []*TRowResult_

func (p *HbaseGetRowWithColumnsResult) GetSuccess() []*TRowResult_ {
	return p.Success
}

var HbaseGetRowWithColumnsResult_Io_DEFAULT *IOError

func (p *HbaseGetRowWithColumnsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetRowWithColumnsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetRowWithColumnsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetRowWithColumnsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetRowWithColumnsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRowResult_, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem119 := &TRowResult_{}
		if err := _elem119.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem119), err)
		}
		p.Success = append(p.Success, _elem119)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowWithColumns_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowWithColumnsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowWithColumnsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowWithColumnsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of the table
//  - Row: row key
//  - Timestamp: timestamp
//  - Attributes: Get attributes
type HbaseGetRowTsArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row        Text            `thrift:"row,2" db:"row" json:"row"`
	Timestamp  int64           `thrift:"timestamp,3" db:"timestamp" json:"timestamp"`
	Attributes map[string]Text `thrift:"attributes,4" db:"attributes" json:"attributes"`
}

func NewHbaseGetRowTsArgs() *HbaseGetRowTsArgs {
	return &HbaseGetRowTsArgs{}
}

func (p *HbaseGetRowTsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseGetRowTsArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseGetRowTsArgs) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *HbaseGetRowTsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseGetRowTsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowTsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseGetRowTsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseGetRowTsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *HbaseGetRowTsArgs) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key120 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key120 = string(temp)
		}
		var _val121 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val121 = temp
		}
		p.Attributes[_key120] = _val121
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseGetRowTsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowTs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowTsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseGetRowTsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseGetRowTsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
	}
	return err
}

func (p *HbaseGetRowTsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributes: ", p), err)
	}
	return err
}

func (p *HbaseGetRowTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowTsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetRowTsResult struct {
	Success []*TRowResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError       `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetRowTsResult() *HbaseGetRowTsResult {
	return &HbaseGetRowTsResult{}
}

var HbaseGetRowTsResult_Success_DEFAULT []*TRowResult_

func (p *HbaseGetRowTsResult) GetSuccess() []*TRowResult_ {
	return p.Success
}

var HbaseGetRowTsResult_Io_DEFAULT *IOError

func (p *HbaseGetRowTsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetRowTsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetRowTsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetRowTsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetRowTsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowTsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRowResult_, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem122 := &TRowResult_{}
		if err := _elem122.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem122), err)
		}
		p.Success = append(p.Success, _elem122)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowTsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetRowTsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowTs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowTsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowTsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowTsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: row key
//  - Columns: List of columns to return, null for all columns
//  - Timestamp
//  - Attributes: Get attributes
type HbaseGetRowWithColumnsTsArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row        Text            `thrift:"row,2" db:"row" json:"row"`
	Columns    []Text          `thrift:"columns,3" db:"columns" json:"columns"`
	Timestamp  int64           `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
	Attributes map[string]Text `thrift:"attributes,5" db:"attributes" json:"attributes"`
}

func NewHbaseGetRowWithColumnsTsArgs() *HbaseGetRowWithColumnsTsArgs {
	return &HbaseGetRowWithColumnsTsArgs{}
}

func (p *HbaseGetRowWithColumnsTsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseGetRowWithColumnsTsArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseGetRowWithColumnsTsArgs) GetColumns() []Text {
	return p.Columns
}

func (p *HbaseGetRowWithColumnsTsArgs) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *HbaseGetRowWithColumnsTsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseGetRowWithColumnsTsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsTsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseGetRowWithColumnsTsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseGetRowWithColumnsTsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		var _elem123 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem123 = temp
		}
		p.Columns = append(p.Columns, _elem123)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsTsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *HbaseGetRowWithColumnsTsArgs) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key124 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key124 = string(temp)
		}
		var _val125 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val125 = temp
		}
		p.Attributes[_key124] = _val125
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsTsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowWithColumnsTs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsTsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseGetRowWithColumnsTsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseGetRowWithColumnsTsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Columns {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err)
	}
	return err
}

func (p *HbaseGetRowWithColumnsTsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err)
	}
	return err
}

func (p *HbaseGetRowWithColumnsTsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:attributes: ", p), err)
	}
	return err
}

func (p *HbaseGetRowWithColumnsTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowWithColumnsTsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetRowWithColumnsTsResult struct {
	Success []*TRowResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError       `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetRowWithColumnsTsResult() *HbaseGetRowWithColumnsTsResult {
	return &HbaseGetRowWithColumnsTsResult{}
}

var HbaseGetRowWithColumnsTsResult_Success_DEFAULT []*TRowResult_

func (p *HbaseGetRowWithColumnsTsResult) GetSuccess() []*TRowResult_ {
	return p.Success
}

var HbaseGetRowWithColumnsTsResult_Io_DEFAULT *IOError

func (p *HbaseGetRowWithColumnsTsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetRowWithColumnsTsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetRowWithColumnsTsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetRowWithColumnsTsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetRowWithColumnsTsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsTsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRowResult_, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem126 := &TRowResult_{}
		if err := _elem126.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem126), err)
		}
		p.Success = append(p.Success, _elem126)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsTsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsTsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowWithColumnsTs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowWithColumnsTsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowWithColumnsTsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowWithColumnsTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowWithColumnsTsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Rows: row keys
//  - Attributes: Get attributes
type HbaseGetRowsArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Rows       []Text          `thrift:"rows,2" db:"rows" json:"rows"`
	Attributes map[string]Text `thrift:"attributes,3" db:"attributes" json:"attributes"`
}

func NewHbaseGetRowsArgs() *HbaseGetRowsArgs {
	return &HbaseGetRowsArgs{}
}

func (p *HbaseGetRowsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseGetRowsArgs) GetRows() []Text {
	return p.Rows
}

func (p *HbaseGetRowsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseGetRowsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseGetRowsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Rows = tSlice
	for i := 0; i < size; i++ {
		var _elem127 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem127 = temp
		}
		p.Rows = append(p.Rows, _elem127)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key128 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key128 = string(temp)
		}
		var _val129 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val129 = temp
		}
		p.Attributes[_key128] = _val129
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseGetRowsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRows_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rows", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rows: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Rows)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Rows {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rows: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:attributes: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetRowsResult struct {
	Success []*TRowResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError       `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetRowsResult() *HbaseGetRowsResult {
	return &HbaseGetRowsResult{}
}

var HbaseGetRowsResult_Success_DEFAULT []*TRowResult_

func (p *HbaseGetRowsResult) GetSuccess() []*TRowResult_ {
	return p.Success
}

var HbaseGetRowsResult_Io_DEFAULT *IOError

func (p *HbaseGetRowsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetRowsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetRowsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetRowsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetRowsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRowResult_, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem130 := &TRowResult_{}
		if err := _elem130.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem130), err)
		}
		p.Success = append(p.Success, _elem130)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetRowsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRows_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Rows: row keys
//  - Columns: List of columns to return, null for all columns
//  - Attributes: Get attributes
type HbaseGetRowsWithColumnsArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Rows       []Text          `thrift:"rows,2" db:"rows" json:"rows"`
	Columns    []Text          `thrift:"columns,3" db:"columns" json:"columns"`
	Attributes map[string]Text `thrift:"attributes,4" db:"attributes" json:"attributes"`
}

func NewHbaseGetRowsWithColumnsArgs() *HbaseGetRowsWithColumnsArgs {
	return &HbaseGetRowsWithColumnsArgs{}
}

func (p *HbaseGetRowsWithColumnsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseGetRowsWithColumnsArgs) GetRows() []Text {
	return p.Rows
}

func (p *HbaseGetRowsWithColumnsArgs) GetColumns() []Text {
	return p.Columns
}

func (p *HbaseGetRowsWithColumnsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseGetRowsWithColumnsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Rows = tSlice
	for i := 0; i < size; i++ {
		var _elem131 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem131 = temp
		}
		p.Rows = append(p.Rows, _elem131)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		var _elem132 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem132 = temp
		}
		p.Columns = append(p.Columns, _elem132)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsArgs) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key133 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key133 = string(temp)
		}
		var _val134 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val134 = temp
		}
		p.Attributes[_key133] = _val134
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowsWithColumns_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsWithColumnsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rows", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rows: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Rows)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Rows {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rows: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsWithColumnsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Columns {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsWithColumnsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributes: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsWithColumnsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowsWithColumnsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetRowsWithColumnsResult struct {
	Success []*TRowResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError       `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetRowsWithColumnsResult() *HbaseGetRowsWithColumnsResult {
	return &HbaseGetRowsWithColumnsResult{}
}

var HbaseGetRowsWithColumnsResult_Success_DEFAULT []*TRowResult_

func (p *HbaseGetRowsWithColumnsResult) GetSuccess() []*TRowResult_ {
	return p.Success
}

var HbaseGetRowsWithColumnsResult_Io_DEFAULT *IOError

func (p *HbaseGetRowsWithColumnsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetRowsWithColumnsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetRowsWithColumnsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetRowsWithColumnsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetRowsWithColumnsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRowResult_, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem135 := &TRowResult_{}
		if err := _elem135.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem135), err)
		}
		p.Success = append(p.Success, _elem135)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowsWithColumns_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowsWithColumnsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowsWithColumnsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowsWithColumnsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of the table
//  - Rows: row keys
//  - Timestamp: timestamp
//  - Attributes: Get attributes
type HbaseGetRowsTsArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Rows       []Text          `thrift:"rows,2" db:"rows" json:"rows"`
	Timestamp  int64           `thrift:"timestamp,3" db:"timestamp" json:"timestamp"`
	Attributes map[string]Text `thrift:"attributes,4" db:"attributes" json:"attributes"`
}

func NewHbaseGetRowsTsArgs() *HbaseGetRowsTsArgs {
	return &HbaseGetRowsTsArgs{}
}

func (p *HbaseGetRowsTsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseGetRowsTsArgs) GetRows() []Text {
	return p.Rows
}

func (p *HbaseGetRowsTsArgs) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *HbaseGetRowsTsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseGetRowsTsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowsTsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseGetRowsTsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Rows = tSlice
	for i := 0; i < size; i++ {
		var _elem136 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem136 = temp
		}
		p.Rows = append(p.Rows, _elem136)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowsTsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *HbaseGetRowsTsArgs) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key137 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key137 = string(temp)
		}
		var _val138 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val138 = temp
		}
		p.Attributes[_key137] = _val138
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseGetRowsTsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowsTs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowsTsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsTsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rows", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rows: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Rows)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Rows {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rows: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsTsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsTsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributes: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowsTsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetRowsTsResult struct {
	Success []*TRowResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError       `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetRowsTsResult() *HbaseGetRowsTsResult {
	return &HbaseGetRowsTsResult{}
}

var HbaseGetRowsTsResult_Success_DEFAULT []*TRowResult_

func (p *HbaseGetRowsTsResult) GetSuccess() []*TRowResult_ {
	return p.Success
}

var HbaseGetRowsTsResult_Io_DEFAULT *IOError

func (p *HbaseGetRowsTsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetRowsTsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetRowsTsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetRowsTsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetRowsTsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowsTsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRowResult_, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem139 := &TRowResult_{}
		if err := _elem139.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem139), err)
		}
		p.Success = append(p.Success, _elem139)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowsTsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetRowsTsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowsTs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowsTsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowsTsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowsTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowsTsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Rows: row keys
//  - Columns: List of columns to return, null for all columns
//  - Timestamp
//  - Attributes: Get attributes
type HbaseGetRowsWithColumnsTsArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Rows       []Text          `thrift:"rows,2" db:"rows" json:"rows"`
	Columns    []Text          `thrift:"columns,3" db:"columns" json:"columns"`
	Timestamp  int64           `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
	Attributes map[string]Text `thrift:"attributes,5" db:"attributes" json:"attributes"`
}

func NewHbaseGetRowsWithColumnsTsArgs() *HbaseGetRowsWithColumnsTsArgs {
	return &HbaseGetRowsWithColumnsTsArgs{}
}

func (p *HbaseGetRowsWithColumnsTsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseGetRowsWithColumnsTsArgs) GetRows() []Text {
	return p.Rows
}

func (p *HbaseGetRowsWithColumnsTsArgs) GetColumns() []Text {
	return p.Columns
}

func (p *HbaseGetRowsWithColumnsTsArgs) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *HbaseGetRowsWithColumnsTsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseGetRowsWithColumnsTsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsTsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsTsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Rows = tSlice
	for i := 0; i < size; i++ {
		var _elem140 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem140 = temp
		}
		p.Rows = append(p.Rows, _elem140)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsTsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		var _elem141 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem141 = temp
		}
		p.Columns = append(p.Columns, _elem141)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsTsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsTsArgs) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key142 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key142 = string(temp)
		}
		var _val143 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val143 = temp
		}
		p.Attributes[_key142] = _val143
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsTsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowsWithColumnsTs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsTsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsWithColumnsTsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rows", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rows: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Rows)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Rows {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rows: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsWithColumnsTsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Columns {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsWithColumnsTsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsWithColumnsTsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:attributes: ", p), err)
	}
	return err
}

func (p *HbaseGetRowsWithColumnsTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowsWithColumnsTsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetRowsWithColumnsTsResult struct {
	Success []*TRowResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError       `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetRowsWithColumnsTsResult() *HbaseGetRowsWithColumnsTsResult {
	return &HbaseGetRowsWithColumnsTsResult{}
}

var HbaseGetRowsWithColumnsTsResult_Success_DEFAULT []*TRowResult_

func (p *HbaseGetRowsWithColumnsTsResult) GetSuccess() []*TRowResult_ {
	return p.Success
}

var HbaseGetRowsWithColumnsTsResult_Io_DEFAULT *IOError

func (p *HbaseGetRowsWithColumnsTsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetRowsWithColumnsTsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetRowsWithColumnsTsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetRowsWithColumnsTsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetRowsWithColumnsTsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsTsResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRowResult_, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem144 := &TRowResult_{}
		if err := _elem144.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem144), err)
		}
		p.Success = append(p.Success, _elem144)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsTsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsTsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowsWithColumnsTs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowsWithColumnsTsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowsWithColumnsTsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowsWithColumnsTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowsWithColumnsTsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: row key
//  - Mutations: list of mutation commands
//  - Attributes: Mutation attributes
type HbaseMutateRowArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row        Text            `thrift:"row,2" db:"row" json:"row"`
	Mutations  []*Mutation     `thrift:"mutations,3" db:"mutations" json:"mutations"`
	Attributes map[string]Text `thrift:"attributes,4" db:"attributes" json:"attributes"`
}

func NewHbaseMutateRowArgs() *HbaseMutateRowArgs {
	return &HbaseMutateRowArgs{}
}

func (p *HbaseMutateRowArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseMutateRowArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseMutateRowArgs) GetMutations() []*Mutation {
	return p.Mutations
}

func (p *HbaseMutateRowArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseMutateRowArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseMutateRowArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseMutateRowArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseMutateRowArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Mutation, 0, size)
	p.Mutations = tSlice
	for i := 0; i < size; i++ {
		_elem145 := &Mutation{
			WriteToWAL: true,
		}
		if err := _elem145.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem145), err)
		}
		p.Mutations = append(p.Mutations, _elem145)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseMutateRowArgs) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key146 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key146 = string(temp)
		}
		var _val147 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val147 = temp
		}
		p.Attributes[_key146] = _val147
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseMutateRowArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mutateRow_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseMutateRowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mutations", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mutations: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Mutations)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Mutations {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mutations: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributes: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseMutateRowArgs(%+v)", *p)
}

// Attributes:
//  - Io
//  - Ia
type HbaseMutateRowResult struct {
	Io *IOError         `thrift:"io,1" db:"io" json:"io,omitempty"`
	Ia *IllegalArgument `thrift:"ia,2" db:"ia" json:"ia,omitempty"`
}

func NewHbaseMutateRowResult() *HbaseMutateRowResult {
	return &HbaseMutateRowResult{}
}

var HbaseMutateRowResult_Io_DEFAULT *IOError

func (p *HbaseMutateRowResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseMutateRowResult_Io_DEFAULT
	}
	return p.Io
}

var HbaseMutateRowResult_Ia_DEFAULT *IllegalArgument

func (p *HbaseMutateRowResult) GetIa() *IllegalArgument {
	if !p.IsSetIa() {
		return HbaseMutateRowResult_Ia_DEFAULT
	}
	return p.Ia
}
func (p *HbaseMutateRowResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseMutateRowResult) IsSetIa() bool {
	return p.Ia != nil
}

func (p *HbaseMutateRowResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseMutateRowResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseMutateRowResult) ReadField2(iprot thrift.TProtocol) error {
	p.Ia = &IllegalArgument{}
	if err := p.Ia.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ia), err)
	}
	return nil
}

func (p *HbaseMutateRowResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mutateRow_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseMutateRowResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseMutateRowResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIa() {
		if err := oprot.WriteFieldBegin("ia", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ia: ", p), err)
		}
		if err := p.Ia.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ia), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ia: ", p), err)
		}
	}
	return err
}

func (p *HbaseMutateRowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseMutateRowResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: row key
//  - Mutations: list of mutation commands
//  - Timestamp: timestamp
//  - Attributes: Mutation attributes
type HbaseMutateRowTsArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row        Text            `thrift:"row,2" db:"row" json:"row"`
	Mutations  []*Mutation     `thrift:"mutations,3" db:"mutations" json:"mutations"`
	Timestamp  int64           `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
	Attributes map[string]Text `thrift:"attributes,5" db:"attributes" json:"attributes"`
}

func NewHbaseMutateRowTsArgs() *HbaseMutateRowTsArgs {
	return &HbaseMutateRowTsArgs{}
}

func (p *HbaseMutateRowTsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseMutateRowTsArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseMutateRowTsArgs) GetMutations() []*Mutation {
	return p.Mutations
}

func (p *HbaseMutateRowTsArgs) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *HbaseMutateRowTsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseMutateRowTsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseMutateRowTsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseMutateRowTsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseMutateRowTsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Mutation, 0, size)
	p.Mutations = tSlice
	for i := 0; i < size; i++ {
		_elem148 := &Mutation{
			WriteToWAL: true,
		}
		if err := _elem148.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem148), err)
		}
		p.Mutations = append(p.Mutations, _elem148)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseMutateRowTsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *HbaseMutateRowTsArgs) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key149 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key149 = string(temp)
		}
		var _val150 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val150 = temp
		}
		p.Attributes[_key149] = _val150
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseMutateRowTsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mutateRowTs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseMutateRowTsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowTsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowTsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mutations", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mutations: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Mutations)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Mutations {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mutations: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowTsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowTsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:attributes: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseMutateRowTsArgs(%+v)", *p)
}

// Attributes:
//  - Io
//  - Ia
type HbaseMutateRowTsResult struct {
	Io *IOError         `thrift:"io,1" db:"io" json:"io,omitempty"`
	Ia *IllegalArgument `thrift:"ia,2" db:"ia" json:"ia,omitempty"`
}

func NewHbaseMutateRowTsResult() *HbaseMutateRowTsResult {
	return &HbaseMutateRowTsResult{}
}

var HbaseMutateRowTsResult_Io_DEFAULT *IOError

func (p *HbaseMutateRowTsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseMutateRowTsResult_Io_DEFAULT
	}
	return p.Io
}

var HbaseMutateRowTsResult_Ia_DEFAULT *IllegalArgument

func (p *HbaseMutateRowTsResult) GetIa() *IllegalArgument {
	if !p.IsSetIa() {
		return HbaseMutateRowTsResult_Ia_DEFAULT
	}
	return p.Ia
}
func (p *HbaseMutateRowTsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseMutateRowTsResult) IsSetIa() bool {
	return p.Ia != nil
}

func (p *HbaseMutateRowTsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseMutateRowTsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseMutateRowTsResult) ReadField2(iprot thrift.TProtocol) error {
	p.Ia = &IllegalArgument{}
	if err := p.Ia.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ia), err)
	}
	return nil
}

func (p *HbaseMutateRowTsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mutateRowTs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseMutateRowTsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseMutateRowTsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIa() {
		if err := oprot.WriteFieldBegin("ia", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ia: ", p), err)
		}
		if err := p.Ia.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ia), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ia: ", p), err)
		}
	}
	return err
}

func (p *HbaseMutateRowTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseMutateRowTsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - RowBatches: list of row batches
//  - Attributes: Mutation attributes
type HbaseMutateRowsArgs struct {
	TableName  Text             `thrift:"tableName,1" db:"tableName" json:"tableName"`
	RowBatches []*BatchMutation `thrift:"rowBatches,2" db:"rowBatches" json:"rowBatches"`
	Attributes map[string]Text  `thrift:"attributes,3" db:"attributes" json:"attributes"`
}

func NewHbaseMutateRowsArgs() *HbaseMutateRowsArgs {
	return &HbaseMutateRowsArgs{}
}

func (p *HbaseMutateRowsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseMutateRowsArgs) GetRowBatches() []*BatchMutation {
	return p.RowBatches
}

func (p *HbaseMutateRowsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseMutateRowsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseMutateRowsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseMutateRowsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*BatchMutation, 0, size)
	p.RowBatches = tSlice
	for i := 0; i < size; i++ {
		_elem151 := &BatchMutation{}
		if err := _elem151.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem151), err)
		}
		p.RowBatches = append(p.RowBatches, _elem151)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseMutateRowsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key152 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key152 = string(temp)
		}
		var _val153 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val153 = temp
		}
		p.Attributes[_key152] = _val153
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseMutateRowsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mutateRows_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseMutateRowsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rowBatches", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rowBatches: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowBatches)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RowBatches {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rowBatches: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:attributes: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseMutateRowsArgs(%+v)", *p)
}

// Attributes:
//  - Io
//  - Ia
type HbaseMutateRowsResult struct {
	Io *IOError         `thrift:"io,1" db:"io" json:"io,omitempty"`
	Ia *IllegalArgument `thrift:"ia,2" db:"ia" json:"ia,omitempty"`
}

func NewHbaseMutateRowsResult() *HbaseMutateRowsResult {
	return &HbaseMutateRowsResult{}
}

var HbaseMutateRowsResult_Io_DEFAULT *IOError

func (p *HbaseMutateRowsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseMutateRowsResult_Io_DEFAULT
	}
	return p.Io
}

var HbaseMutateRowsResult_Ia_DEFAULT *IllegalArgument

func (p *HbaseMutateRowsResult) GetIa() *IllegalArgument {
	if !p.IsSetIa() {
		return HbaseMutateRowsResult_Ia_DEFAULT
	}
	return p.Ia
}
func (p *HbaseMutateRowsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseMutateRowsResult) IsSetIa() bool {
	return p.Ia != nil
}

func (p *HbaseMutateRowsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseMutateRowsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseMutateRowsResult) ReadField2(iprot thrift.TProtocol) error {
	p.Ia = &IllegalArgument{}
	if err := p.Ia.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ia), err)
	}
	return nil
}

func (p *HbaseMutateRowsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mutateRows_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseMutateRowsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseMutateRowsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIa() {
		if err := oprot.WriteFieldBegin("ia", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ia: ", p), err)
		}
		if err := p.Ia.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ia), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ia: ", p), err)
		}
	}
	return err
}

func (p *HbaseMutateRowsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseMutateRowsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - RowBatches: list of row batches
//  - Timestamp: timestamp
//  - Attributes: Mutation attributes
type HbaseMutateRowsTsArgs struct {
	TableName  Text             `thrift:"tableName,1" db:"tableName" json:"tableName"`
	RowBatches []*BatchMutation `thrift:"rowBatches,2" db:"rowBatches" json:"rowBatches"`
	Timestamp  int64            `thrift:"timestamp,3" db:"timestamp" json:"timestamp"`
	Attributes map[string]Text  `thrift:"attributes,4" db:"attributes" json:"attributes"`
}

func NewHbaseMutateRowsTsArgs() *HbaseMutateRowsTsArgs {
	return &HbaseMutateRowsTsArgs{}
}

func (p *HbaseMutateRowsTsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseMutateRowsTsArgs) GetRowBatches() []*BatchMutation {
	return p.RowBatches
}

func (p *HbaseMutateRowsTsArgs) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *HbaseMutateRowsTsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseMutateRowsTsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseMutateRowsTsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseMutateRowsTsArgs) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*BatchMutation, 0, size)
	p.RowBatches = tSlice
	for i := 0; i < size; i++ {
		_elem154 := &BatchMutation{}
		if err := _elem154.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem154), err)
		}
		p.RowBatches = append(p.RowBatches, _elem154)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseMutateRowsTsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *HbaseMutateRowsTsArgs) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key155 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key155 = string(temp)
		}
		var _val156 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val156 = temp
		}
		p.Attributes[_key155] = _val156
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseMutateRowsTsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mutateRowsTs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseMutateRowsTsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowsTsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rowBatches", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rowBatches: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowBatches)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RowBatches {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rowBatches: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowsTsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowsTsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributes: ", p), err)
	}
	return err
}

func (p *HbaseMutateRowsTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseMutateRowsTsArgs(%+v)", *p)
}

// Attributes:
//  - Io
//  - Ia
type HbaseMutateRowsTsResult struct {
	Io *IOError         `thrift:"io,1" db:"io" json:"io,omitempty"`
	Ia *IllegalArgument `thrift:"ia,2" db:"ia" json:"ia,omitempty"`
}

func NewHbaseMutateRowsTsResult() *HbaseMutateRowsTsResult {
	return &HbaseMutateRowsTsResult{}
}

var HbaseMutateRowsTsResult_Io_DEFAULT *IOError

func (p *HbaseMutateRowsTsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseMutateRowsTsResult_Io_DEFAULT
	}
	return p.Io
}

var HbaseMutateRowsTsResult_Ia_DEFAULT *IllegalArgument

func (p *HbaseMutateRowsTsResult) GetIa() *IllegalArgument {
	if !p.IsSetIa() {
		return HbaseMutateRowsTsResult_Ia_DEFAULT
	}
	return p.Ia
}
func (p *HbaseMutateRowsTsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseMutateRowsTsResult) IsSetIa() bool {
	return p.Ia != nil
}

func (p *HbaseMutateRowsTsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseMutateRowsTsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseMutateRowsTsResult) ReadField2(iprot thrift.TProtocol) error {
	p.Ia = &IllegalArgument{}
	if err := p.Ia.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ia), err)
	}
	return nil
}

func (p *HbaseMutateRowsTsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mutateRowsTs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseMutateRowsTsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseMutateRowsTsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIa() {
		if err := oprot.WriteFieldBegin("ia", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ia: ", p), err)
		}
		if err := p.Ia.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ia), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ia: ", p), err)
		}
	}
	return err
}

func (p *HbaseMutateRowsTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseMutateRowsTsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: row to increment
//  - Column: name of column
//  - Value: amount to increment by
type HbaseAtomicIncrementArgs struct {
	TableName Text  `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row       Text  `thrift:"row,2" db:"row" json:"row"`
	Column    Text  `thrift:"column,3" db:"column" json:"column"`
	Value     int64 `thrift:"value,4" db:"value" json:"value"`
}

func NewHbaseAtomicIncrementArgs() *HbaseAtomicIncrementArgs {
	return &HbaseAtomicIncrementArgs{}
}

func (p *HbaseAtomicIncrementArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseAtomicIncrementArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseAtomicIncrementArgs) GetColumn() Text {
	return p.Column
}

func (p *HbaseAtomicIncrementArgs) GetValue() int64 {
	return p.Value
}
func (p *HbaseAtomicIncrementArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseAtomicIncrementArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseAtomicIncrementArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseAtomicIncrementArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Text(v)
		p.Column = temp
	}
	return nil
}

func (p *HbaseAtomicIncrementArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *HbaseAtomicIncrementArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("atomicIncrement_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseAtomicIncrementArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseAtomicIncrementArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseAtomicIncrementArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column: ", p), err)
	}
	if err := oprot.WriteBinary(p.Column); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.column (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column: ", p), err)
	}
	return err
}

func (p *HbaseAtomicIncrementArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err)
	}
	return err
}

func (p *HbaseAtomicIncrementArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseAtomicIncrementArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
//  - Ia
type HbaseAtomicIncrementResult struct {
	Success *int64           `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError         `thrift:"io,1" db:"io" json:"io,omitempty"`
	Ia      *IllegalArgument `thrift:"ia,2" db:"ia" json:"ia,omitempty"`
}

func NewHbaseAtomicIncrementResult() *HbaseAtomicIncrementResult {
	return &HbaseAtomicIncrementResult{}
}

var HbaseAtomicIncrementResult_Success_DEFAULT int64

func (p *HbaseAtomicIncrementResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return HbaseAtomicIncrementResult_Success_DEFAULT
	}
	return *p.Success
}

var HbaseAtomicIncrementResult_Io_DEFAULT *IOError

func (p *HbaseAtomicIncrementResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseAtomicIncrementResult_Io_DEFAULT
	}
	return p.Io
}

var HbaseAtomicIncrementResult_Ia_DEFAULT *IllegalArgument

func (p *HbaseAtomicIncrementResult) GetIa() *IllegalArgument {
	if !p.IsSetIa() {
		return HbaseAtomicIncrementResult_Ia_DEFAULT
	}
	return p.Ia
}
func (p *HbaseAtomicIncrementResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseAtomicIncrementResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseAtomicIncrementResult) IsSetIa() bool {
	return p.Ia != nil
}

func (p *HbaseAtomicIncrementResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseAtomicIncrementResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *HbaseAtomicIncrementResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseAtomicIncrementResult) ReadField2(iprot thrift.TProtocol) error {
	p.Ia = &IllegalArgument{}
	if err := p.Ia.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ia), err)
	}
	return nil
}

func (p *HbaseAtomicIncrementResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("atomicIncrement_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseAtomicIncrementResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseAtomicIncrementResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseAtomicIncrementResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIa() {
		if err := oprot.WriteFieldBegin("ia", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ia: ", p), err)
		}
		if err := p.Ia.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ia), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ia: ", p), err)
		}
	}
	return err
}

func (p *HbaseAtomicIncrementResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseAtomicIncrementResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: Row to update
//  - Column: name of column whose value is to be deleted
//  - Attributes: Delete attributes
type HbaseDeleteAllArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row        Text            `thrift:"row,2" db:"row" json:"row"`
	Column     Text            `thrift:"column,3" db:"column" json:"column"`
	Attributes map[string]Text `thrift:"attributes,4" db:"attributes" json:"attributes"`
}

func NewHbaseDeleteAllArgs() *HbaseDeleteAllArgs {
	return &HbaseDeleteAllArgs{}
}

func (p *HbaseDeleteAllArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseDeleteAllArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseDeleteAllArgs) GetColumn() Text {
	return p.Column
}

func (p *HbaseDeleteAllArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseDeleteAllArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseDeleteAllArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseDeleteAllArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseDeleteAllArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Text(v)
		p.Column = temp
	}
	return nil
}

func (p *HbaseDeleteAllArgs) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key157 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key157 = string(temp)
		}
		var _val158 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val158 = temp
		}
		p.Attributes[_key157] = _val158
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseDeleteAllArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteAll_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseDeleteAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column: ", p), err)
	}
	if err := oprot.WriteBinary(p.Column); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.column (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributes: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseDeleteAllArgs(%+v)", *p)
}

// Attributes:
//  - Io
type HbaseDeleteAllResult struct {
	Io *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseDeleteAllResult() *HbaseDeleteAllResult {
	return &HbaseDeleteAllResult{}
}

var HbaseDeleteAllResult_Io_DEFAULT *IOError

func (p *HbaseDeleteAllResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseDeleteAllResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseDeleteAllResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseDeleteAllResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseDeleteAllResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseDeleteAllResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteAll_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseDeleteAllResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseDeleteAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseDeleteAllResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: Row to update
//  - Column: name of column whose value is to be deleted
//  - Timestamp: timestamp
//  - Attributes: Delete attributes
type HbaseDeleteAllTsArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row        Text            `thrift:"row,2" db:"row" json:"row"`
	Column     Text            `thrift:"column,3" db:"column" json:"column"`
	Timestamp  int64           `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
	Attributes map[string]Text `thrift:"attributes,5" db:"attributes" json:"attributes"`
}

func NewHbaseDeleteAllTsArgs() *HbaseDeleteAllTsArgs {
	return &HbaseDeleteAllTsArgs{}
}

func (p *HbaseDeleteAllTsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseDeleteAllTsArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseDeleteAllTsArgs) GetColumn() Text {
	return p.Column
}

func (p *HbaseDeleteAllTsArgs) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *HbaseDeleteAllTsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseDeleteAllTsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseDeleteAllTsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseDeleteAllTsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseDeleteAllTsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Text(v)
		p.Column = temp
	}
	return nil
}

func (p *HbaseDeleteAllTsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *HbaseDeleteAllTsArgs) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key159 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key159 = string(temp)
		}
		var _val160 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val160 = temp
		}
		p.Attributes[_key159] = _val160
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseDeleteAllTsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteAllTs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseDeleteAllTsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllTsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllTsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column: ", p), err)
	}
	if err := oprot.WriteBinary(p.Column); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.column (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllTsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllTsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:attributes: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseDeleteAllTsArgs(%+v)", *p)
}

// Attributes:
//  - Io
type HbaseDeleteAllTsResult struct {
	Io *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseDeleteAllTsResult() *HbaseDeleteAllTsResult {
	return &HbaseDeleteAllTsResult{}
}

var HbaseDeleteAllTsResult_Io_DEFAULT *IOError

func (p *HbaseDeleteAllTsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseDeleteAllTsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseDeleteAllTsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseDeleteAllTsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseDeleteAllTsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseDeleteAllTsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteAllTs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseDeleteAllTsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseDeleteAllTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseDeleteAllTsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: key of the row to be completely deleted.
//  - Attributes: Delete attributes
type HbaseDeleteAllRowArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row        Text            `thrift:"row,2" db:"row" json:"row"`
	Attributes map[string]Text `thrift:"attributes,3" db:"attributes" json:"attributes"`
}

func NewHbaseDeleteAllRowArgs() *HbaseDeleteAllRowArgs {
	return &HbaseDeleteAllRowArgs{}
}

func (p *HbaseDeleteAllRowArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseDeleteAllRowArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseDeleteAllRowArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseDeleteAllRowArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseDeleteAllRowArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseDeleteAllRowArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseDeleteAllRowArgs) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key161 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key161 = string(temp)
		}
		var _val162 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val162 = temp
		}
		p.Attributes[_key161] = _val162
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseDeleteAllRowArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteAllRow_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseDeleteAllRowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllRowArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllRowArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:attributes: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllRowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseDeleteAllRowArgs(%+v)", *p)
}

// Attributes:
//  - Io
type HbaseDeleteAllRowResult struct {
	Io *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseDeleteAllRowResult() *HbaseDeleteAllRowResult {
	return &HbaseDeleteAllRowResult{}
}

var HbaseDeleteAllRowResult_Io_DEFAULT *IOError

func (p *HbaseDeleteAllRowResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseDeleteAllRowResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseDeleteAllRowResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseDeleteAllRowResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseDeleteAllRowResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseDeleteAllRowResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteAllRow_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseDeleteAllRowResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseDeleteAllRowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseDeleteAllRowResult(%+v)", *p)
}

// Attributes:
//  - Increment: The single increment to apply
type HbaseIncrementArgs struct {
	Increment *TIncrement `thrift:"increment,1" db:"increment" json:"increment"`
}

func NewHbaseIncrementArgs() *HbaseIncrementArgs {
	return &HbaseIncrementArgs{}
}

var HbaseIncrementArgs_Increment_DEFAULT *TIncrement

func (p *HbaseIncrementArgs) GetIncrement() *TIncrement {
	if !p.IsSetIncrement() {
		return HbaseIncrementArgs_Increment_DEFAULT
	}
	return p.Increment
}
func (p *HbaseIncrementArgs) IsSetIncrement() bool {
	return p.Increment != nil
}

func (p *HbaseIncrementArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseIncrementArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Increment = &TIncrement{}
	if err := p.Increment.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Increment), err)
	}
	return nil
}

func (p *HbaseIncrementArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("increment_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseIncrementArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("increment", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:increment: ", p), err)
	}
	if err := p.Increment.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Increment), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:increment: ", p), err)
	}
	return err
}

func (p *HbaseIncrementArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseIncrementArgs(%+v)", *p)
}

// Attributes:
//  - Io
type HbaseIncrementResult struct {
	Io *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseIncrementResult() *HbaseIncrementResult {
	return &HbaseIncrementResult{}
}

var HbaseIncrementResult_Io_DEFAULT *IOError

func (p *HbaseIncrementResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseIncrementResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseIncrementResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseIncrementResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseIncrementResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseIncrementResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("increment_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseIncrementResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseIncrementResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseIncrementResult(%+v)", *p)
}

// Attributes:
//  - Increments: The list of increments
type HbaseIncrementRowsArgs struct {
	Increments []*TIncrement `thrift:"increments,1" db:"increments" json:"increments"`
}

func NewHbaseIncrementRowsArgs() *HbaseIncrementRowsArgs {
	return &HbaseIncrementRowsArgs{}
}

func (p *HbaseIncrementRowsArgs) GetIncrements() []*TIncrement {
	return p.Increments
}
func (p *HbaseIncrementRowsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseIncrementRowsArgs) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TIncrement, 0, size)
	p.Increments = tSlice
	for i := 0; i < size; i++ {
		_elem163 := &TIncrement{}
		if err := _elem163.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem163), err)
		}
		p.Increments = append(p.Increments, _elem163)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseIncrementRowsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("incrementRows_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseIncrementRowsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("increments", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:increments: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Increments)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Increments {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:increments: ", p), err)
	}
	return err
}

func (p *HbaseIncrementRowsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseIncrementRowsArgs(%+v)", *p)
}

// Attributes:
//  - Io
type HbaseIncrementRowsResult struct {
	Io *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseIncrementRowsResult() *HbaseIncrementRowsResult {
	return &HbaseIncrementRowsResult{}
}

var HbaseIncrementRowsResult_Io_DEFAULT *IOError

func (p *HbaseIncrementRowsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseIncrementRowsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseIncrementRowsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseIncrementRowsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseIncrementRowsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseIncrementRowsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("incrementRows_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseIncrementRowsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseIncrementRowsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseIncrementRowsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: key of the row to be completely deleted.
//  - Timestamp: timestamp
//  - Attributes: Delete attributes
type HbaseDeleteAllRowTsArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row        Text            `thrift:"row,2" db:"row" json:"row"`
	Timestamp  int64           `thrift:"timestamp,3" db:"timestamp" json:"timestamp"`
	Attributes map[string]Text `thrift:"attributes,4" db:"attributes" json:"attributes"`
}

func NewHbaseDeleteAllRowTsArgs() *HbaseDeleteAllRowTsArgs {
	return &HbaseDeleteAllRowTsArgs{}
}

func (p *HbaseDeleteAllRowTsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseDeleteAllRowTsArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseDeleteAllRowTsArgs) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *HbaseDeleteAllRowTsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseDeleteAllRowTsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseDeleteAllRowTsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseDeleteAllRowTsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseDeleteAllRowTsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *HbaseDeleteAllRowTsArgs) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key164 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key164 = string(temp)
		}
		var _val165 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val165 = temp
		}
		p.Attributes[_key164] = _val165
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseDeleteAllRowTsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteAllRowTs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseDeleteAllRowTsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllRowTsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllRowTsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllRowTsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributes: ", p), err)
	}
	return err
}

func (p *HbaseDeleteAllRowTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseDeleteAllRowTsArgs(%+v)", *p)
}

// Attributes:
//  - Io
type HbaseDeleteAllRowTsResult struct {
	Io *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseDeleteAllRowTsResult() *HbaseDeleteAllRowTsResult {
	return &HbaseDeleteAllRowTsResult{}
}

var HbaseDeleteAllRowTsResult_Io_DEFAULT *IOError

func (p *HbaseDeleteAllRowTsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseDeleteAllRowTsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseDeleteAllRowTsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseDeleteAllRowTsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseDeleteAllRowTsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseDeleteAllRowTsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteAllRowTs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseDeleteAllRowTsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseDeleteAllRowTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseDeleteAllRowTsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Scan: Scan instance
//  - Attributes: Scan attributes
type HbaseScannerOpenWithScanArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Scan       *TScan          `thrift:"scan,2" db:"scan" json:"scan"`
	Attributes map[string]Text `thrift:"attributes,3" db:"attributes" json:"attributes"`
}

func NewHbaseScannerOpenWithScanArgs() *HbaseScannerOpenWithScanArgs {
	return &HbaseScannerOpenWithScanArgs{}
}

func (p *HbaseScannerOpenWithScanArgs) GetTableName() Text {
	return p.TableName
}

var HbaseScannerOpenWithScanArgs_Scan_DEFAULT *TScan

func (p *HbaseScannerOpenWithScanArgs) GetScan() *TScan {
	if !p.IsSetScan() {
		return HbaseScannerOpenWithScanArgs_Scan_DEFAULT
	}
	return p.Scan
}

func (p *HbaseScannerOpenWithScanArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseScannerOpenWithScanArgs) IsSetScan() bool {
	return p.Scan != nil
}

func (p *HbaseScannerOpenWithScanArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerOpenWithScanArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseScannerOpenWithScanArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Scan = &TScan{}
	if err := p.Scan.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Scan), err)
	}
	return nil
}

func (p *HbaseScannerOpenWithScanArgs) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key166 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key166 = string(temp)
		}
		var _val167 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val167 = temp
		}
		p.Attributes[_key166] = _val167
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithScanArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerOpenWithScan_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithScanArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithScanArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scan", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:scan: ", p), err)
	}
	if err := p.Scan.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Scan), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:scan: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithScanArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:attributes: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithScanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerOpenWithScanArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseScannerOpenWithScanResult struct {
	Success *ScannerID `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError   `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseScannerOpenWithScanResult() *HbaseScannerOpenWithScanResult {
	return &HbaseScannerOpenWithScanResult{}
}

var HbaseScannerOpenWithScanResult_Success_DEFAULT ScannerID

func (p *HbaseScannerOpenWithScanResult) GetSuccess() ScannerID {
	if !p.IsSetSuccess() {
		return HbaseScannerOpenWithScanResult_Success_DEFAULT
	}
	return *p.Success
}

var HbaseScannerOpenWithScanResult_Io_DEFAULT *IOError

func (p *HbaseScannerOpenWithScanResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseScannerOpenWithScanResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseScannerOpenWithScanResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseScannerOpenWithScanResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseScannerOpenWithScanResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerOpenWithScanResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := ScannerID(v)
		p.Success = &temp
	}
	return nil
}

func (p *HbaseScannerOpenWithScanResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseScannerOpenWithScanResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerOpenWithScan_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithScanResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerOpenWithScanResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerOpenWithScanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerOpenWithScanResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - StartRow: Starting row in table to scan.
// Send "" (empty string) to start at the first row.
//  - Columns: columns to scan. If column name is a column family, all
// columns of the specified column family are returned. It's also possible
// to pass a regex in the column qualifier.
//  - Attributes: Scan attributes
type HbaseScannerOpenArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	StartRow   Text            `thrift:"startRow,2" db:"startRow" json:"startRow"`
	Columns    []Text          `thrift:"columns,3" db:"columns" json:"columns"`
	Attributes map[string]Text `thrift:"attributes,4" db:"attributes" json:"attributes"`
}

func NewHbaseScannerOpenArgs() *HbaseScannerOpenArgs {
	return &HbaseScannerOpenArgs{}
}

func (p *HbaseScannerOpenArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseScannerOpenArgs) GetStartRow() Text {
	return p.StartRow
}

func (p *HbaseScannerOpenArgs) GetColumns() []Text {
	return p.Columns
}

func (p *HbaseScannerOpenArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseScannerOpenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerOpenArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseScannerOpenArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.StartRow = temp
	}
	return nil
}

func (p *HbaseScannerOpenArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		var _elem168 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem168 = temp
		}
		p.Columns = append(p.Columns, _elem168)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenArgs) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key169 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key169 = string(temp)
		}
		var _val170 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val170 = temp
		}
		p.Attributes[_key169] = _val170
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerOpen_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startRow", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.StartRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startRow (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startRow: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Columns {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributes: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerOpenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseScannerOpenResult struct {
	Success *ScannerID `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError   `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseScannerOpenResult() *HbaseScannerOpenResult {
	return &HbaseScannerOpenResult{}
}

var HbaseScannerOpenResult_Success_DEFAULT ScannerID

func (p *HbaseScannerOpenResult) GetSuccess() ScannerID {
	if !p.IsSetSuccess() {
		return HbaseScannerOpenResult_Success_DEFAULT
	}
	return *p.Success
}

var HbaseScannerOpenResult_Io_DEFAULT *IOError

func (p *HbaseScannerOpenResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseScannerOpenResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseScannerOpenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseScannerOpenResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseScannerOpenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerOpenResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := ScannerID(v)
		p.Success = &temp
	}
	return nil
}

func (p *HbaseScannerOpenResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseScannerOpenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerOpen_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerOpenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerOpenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerOpenResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - StartRow: Starting row in table to scan.
// Send "" (empty string) to start at the first row.
//  - StopRow: row to stop scanning on. This row is *not* included in the
// scanner's results
//  - Columns: columns to scan. If column name is a column family, all
// columns of the specified column family are returned. It's also possible
// to pass a regex in the column qualifier.
//  - Attributes: Scan attributes
type HbaseScannerOpenWithStopArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	StartRow   Text            `thrift:"startRow,2" db:"startRow" json:"startRow"`
	StopRow    Text            `thrift:"stopRow,3" db:"stopRow" json:"stopRow"`
	Columns    []Text          `thrift:"columns,4" db:"columns" json:"columns"`
	Attributes map[string]Text `thrift:"attributes,5" db:"attributes" json:"attributes"`
}

func NewHbaseScannerOpenWithStopArgs() *HbaseScannerOpenWithStopArgs {
	return &HbaseScannerOpenWithStopArgs{}
}

func (p *HbaseScannerOpenWithStopArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseScannerOpenWithStopArgs) GetStartRow() Text {
	return p.StartRow
}

func (p *HbaseScannerOpenWithStopArgs) GetStopRow() Text {
	return p.StopRow
}

func (p *HbaseScannerOpenWithStopArgs) GetColumns() []Text {
	return p.Columns
}

func (p *HbaseScannerOpenWithStopArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseScannerOpenWithStopArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerOpenWithStopArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseScannerOpenWithStopArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.StartRow = temp
	}
	return nil
}

func (p *HbaseScannerOpenWithStopArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Text(v)
		p.StopRow = temp
	}
	return nil
}

func (p *HbaseScannerOpenWithStopArgs) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		var _elem171 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem171 = temp
		}
		p.Columns = append(p.Columns, _elem171)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithStopArgs) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key172 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key172 = string(temp)
		}
		var _val173 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val173 = temp
		}
		p.Attributes[_key172] = _val173
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithStopArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerOpenWithStop_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithStopArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithStopArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startRow", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.StartRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startRow (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startRow: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithStopArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stopRow", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stopRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.StopRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stopRow (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stopRow: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithStopArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Columns {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:columns: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithStopArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:attributes: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithStopArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerOpenWithStopArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseScannerOpenWithStopResult struct {
	Success *ScannerID `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError   `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseScannerOpenWithStopResult() *HbaseScannerOpenWithStopResult {
	return &HbaseScannerOpenWithStopResult{}
}

var HbaseScannerOpenWithStopResult_Success_DEFAULT ScannerID

func (p *HbaseScannerOpenWithStopResult) GetSuccess() ScannerID {
	if !p.IsSetSuccess() {
		return HbaseScannerOpenWithStopResult_Success_DEFAULT
	}
	return *p.Success
}

var HbaseScannerOpenWithStopResult_Io_DEFAULT *IOError

func (p *HbaseScannerOpenWithStopResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseScannerOpenWithStopResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseScannerOpenWithStopResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseScannerOpenWithStopResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseScannerOpenWithStopResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerOpenWithStopResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := ScannerID(v)
		p.Success = &temp
	}
	return nil
}

func (p *HbaseScannerOpenWithStopResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseScannerOpenWithStopResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerOpenWithStop_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithStopResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerOpenWithStopResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerOpenWithStopResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerOpenWithStopResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - StartAndPrefix: the prefix (and thus start row) of the keys you want
//  - Columns: the columns you want returned
//  - Attributes: Scan attributes
type HbaseScannerOpenWithPrefixArgs struct {
	TableName      Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	StartAndPrefix Text            `thrift:"startAndPrefix,2" db:"startAndPrefix" json:"startAndPrefix"`
	Columns        []Text          `thrift:"columns,3" db:"columns" json:"columns"`
	Attributes     map[string]Text `thrift:"attributes,4" db:"attributes" json:"attributes"`
}

func NewHbaseScannerOpenWithPrefixArgs() *HbaseScannerOpenWithPrefixArgs {
	return &HbaseScannerOpenWithPrefixArgs{}
}

func (p *HbaseScannerOpenWithPrefixArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseScannerOpenWithPrefixArgs) GetStartAndPrefix() Text {
	return p.StartAndPrefix
}

func (p *HbaseScannerOpenWithPrefixArgs) GetColumns() []Text {
	return p.Columns
}

func (p *HbaseScannerOpenWithPrefixArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseScannerOpenWithPrefixArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerOpenWithPrefixArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseScannerOpenWithPrefixArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.StartAndPrefix = temp
	}
	return nil
}

func (p *HbaseScannerOpenWithPrefixArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		var _elem174 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem174 = temp
		}
		p.Columns = append(p.Columns, _elem174)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithPrefixArgs) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key175 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key175 = string(temp)
		}
		var _val176 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val176 = temp
		}
		p.Attributes[_key175] = _val176
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithPrefixArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerOpenWithPrefix_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithPrefixArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithPrefixArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startAndPrefix", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startAndPrefix: ", p), err)
	}
	if err := oprot.WriteBinary(p.StartAndPrefix); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startAndPrefix (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startAndPrefix: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithPrefixArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Columns {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithPrefixArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributes: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithPrefixArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerOpenWithPrefixArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseScannerOpenWithPrefixResult struct {
	Success *ScannerID `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError   `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseScannerOpenWithPrefixResult() *HbaseScannerOpenWithPrefixResult {
	return &HbaseScannerOpenWithPrefixResult{}
}

var HbaseScannerOpenWithPrefixResult_Success_DEFAULT ScannerID

func (p *HbaseScannerOpenWithPrefixResult) GetSuccess() ScannerID {
	if !p.IsSetSuccess() {
		return HbaseScannerOpenWithPrefixResult_Success_DEFAULT
	}
	return *p.Success
}

var HbaseScannerOpenWithPrefixResult_Io_DEFAULT *IOError

func (p *HbaseScannerOpenWithPrefixResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseScannerOpenWithPrefixResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseScannerOpenWithPrefixResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseScannerOpenWithPrefixResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseScannerOpenWithPrefixResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerOpenWithPrefixResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := ScannerID(v)
		p.Success = &temp
	}
	return nil
}

func (p *HbaseScannerOpenWithPrefixResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseScannerOpenWithPrefixResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerOpenWithPrefix_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithPrefixResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerOpenWithPrefixResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerOpenWithPrefixResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerOpenWithPrefixResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - StartRow: Starting row in table to scan.
// Send "" (empty string) to start at the first row.
//  - Columns: columns to scan. If column name is a column family, all
// columns of the specified column family are returned. It's also possible
// to pass a regex in the column qualifier.
//  - Timestamp: timestamp
//  - Attributes: Scan attributes
type HbaseScannerOpenTsArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	StartRow   Text            `thrift:"startRow,2" db:"startRow" json:"startRow"`
	Columns    []Text          `thrift:"columns,3" db:"columns" json:"columns"`
	Timestamp  int64           `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
	Attributes map[string]Text `thrift:"attributes,5" db:"attributes" json:"attributes"`
}

func NewHbaseScannerOpenTsArgs() *HbaseScannerOpenTsArgs {
	return &HbaseScannerOpenTsArgs{}
}

func (p *HbaseScannerOpenTsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseScannerOpenTsArgs) GetStartRow() Text {
	return p.StartRow
}

func (p *HbaseScannerOpenTsArgs) GetColumns() []Text {
	return p.Columns
}

func (p *HbaseScannerOpenTsArgs) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *HbaseScannerOpenTsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseScannerOpenTsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerOpenTsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseScannerOpenTsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.StartRow = temp
	}
	return nil
}

func (p *HbaseScannerOpenTsArgs) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		var _elem177 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem177 = temp
		}
		p.Columns = append(p.Columns, _elem177)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenTsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *HbaseScannerOpenTsArgs) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key178 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key178 = string(temp)
		}
		var _val179 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val179 = temp
		}
		p.Attributes[_key178] = _val179
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenTsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerOpenTs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenTsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenTsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startRow", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.StartRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startRow (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startRow: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenTsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Columns {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenTsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenTsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:attributes: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerOpenTsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseScannerOpenTsResult struct {
	Success *ScannerID `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError   `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseScannerOpenTsResult() *HbaseScannerOpenTsResult {
	return &HbaseScannerOpenTsResult{}
}

var HbaseScannerOpenTsResult_Success_DEFAULT ScannerID

func (p *HbaseScannerOpenTsResult) GetSuccess() ScannerID {
	if !p.IsSetSuccess() {
		return HbaseScannerOpenTsResult_Success_DEFAULT
	}
	return *p.Success
}

var HbaseScannerOpenTsResult_Io_DEFAULT *IOError

func (p *HbaseScannerOpenTsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseScannerOpenTsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseScannerOpenTsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseScannerOpenTsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseScannerOpenTsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerOpenTsResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := ScannerID(v)
		p.Success = &temp
	}
	return nil
}

func (p *HbaseScannerOpenTsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseScannerOpenTsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerOpenTs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenTsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerOpenTsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerOpenTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerOpenTsResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - StartRow: Starting row in table to scan.
// Send "" (empty string) to start at the first row.
//  - StopRow: row to stop scanning on. This row is *not* included in the
// scanner's results
//  - Columns: columns to scan. If column name is a column family, all
// columns of the specified column family are returned. It's also possible
// to pass a regex in the column qualifier.
//  - Timestamp: timestamp
//  - Attributes: Scan attributes
type HbaseScannerOpenWithStopTsArgs struct {
	TableName  Text            `thrift:"tableName,1" db:"tableName" json:"tableName"`
	StartRow   Text            `thrift:"startRow,2" db:"startRow" json:"startRow"`
	StopRow    Text            `thrift:"stopRow,3" db:"stopRow" json:"stopRow"`
	Columns    []Text          `thrift:"columns,4" db:"columns" json:"columns"`
	Timestamp  int64           `thrift:"timestamp,5" db:"timestamp" json:"timestamp"`
	Attributes map[string]Text `thrift:"attributes,6" db:"attributes" json:"attributes"`
}

func NewHbaseScannerOpenWithStopTsArgs() *HbaseScannerOpenWithStopTsArgs {
	return &HbaseScannerOpenWithStopTsArgs{}
}

func (p *HbaseScannerOpenWithStopTsArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseScannerOpenWithStopTsArgs) GetStartRow() Text {
	return p.StartRow
}

func (p *HbaseScannerOpenWithStopTsArgs) GetStopRow() Text {
	return p.StopRow
}

func (p *HbaseScannerOpenWithStopTsArgs) GetColumns() []Text {
	return p.Columns
}

func (p *HbaseScannerOpenWithStopTsArgs) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *HbaseScannerOpenWithStopTsArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseScannerOpenWithStopTsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerOpenWithStopTsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseScannerOpenWithStopTsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.StartRow = temp
	}
	return nil
}

func (p *HbaseScannerOpenWithStopTsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Text(v)
		p.StopRow = temp
	}
	return nil
}

func (p *HbaseScannerOpenWithStopTsArgs) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Text, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		var _elem180 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_elem180 = temp
		}
		p.Columns = append(p.Columns, _elem180)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithStopTsArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *HbaseScannerOpenWithStopTsArgs) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key181 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key181 = string(temp)
		}
		var _val182 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val182 = temp
		}
		p.Attributes[_key181] = _val182
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithStopTsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerOpenWithStopTs_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithStopTsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithStopTsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startRow", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.StartRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startRow (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startRow: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithStopTsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stopRow", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stopRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.StopRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stopRow (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stopRow: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithStopTsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Columns {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:columns: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithStopTsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:timestamp: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithStopTsArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:attributes: ", p), err)
	}
	return err
}

func (p *HbaseScannerOpenWithStopTsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerOpenWithStopTsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseScannerOpenWithStopTsResult struct {
	Success *ScannerID `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError   `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseScannerOpenWithStopTsResult() *HbaseScannerOpenWithStopTsResult {
	return &HbaseScannerOpenWithStopTsResult{}
}

var HbaseScannerOpenWithStopTsResult_Success_DEFAULT ScannerID

func (p *HbaseScannerOpenWithStopTsResult) GetSuccess() ScannerID {
	if !p.IsSetSuccess() {
		return HbaseScannerOpenWithStopTsResult_Success_DEFAULT
	}
	return *p.Success
}

var HbaseScannerOpenWithStopTsResult_Io_DEFAULT *IOError

func (p *HbaseScannerOpenWithStopTsResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseScannerOpenWithStopTsResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseScannerOpenWithStopTsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseScannerOpenWithStopTsResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseScannerOpenWithStopTsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerOpenWithStopTsResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := ScannerID(v)
		p.Success = &temp
	}
	return nil
}

func (p *HbaseScannerOpenWithStopTsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseScannerOpenWithStopTsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerOpenWithStopTs_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerOpenWithStopTsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerOpenWithStopTsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerOpenWithStopTsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerOpenWithStopTsResult(%+v)", *p)
}

// Attributes:
//  - ID: id of a scanner returned by scannerOpen
type HbaseScannerGetArgs struct {
	ID ScannerID `thrift:"id,1" db:"id" json:"id"`
}

func NewHbaseScannerGetArgs() *HbaseScannerGetArgs {
	return &HbaseScannerGetArgs{}
}

func (p *HbaseScannerGetArgs) GetID() ScannerID {
	return p.ID
}
func (p *HbaseScannerGetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerGetArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ScannerID(v)
		p.ID = temp
	}
	return nil
}

func (p *HbaseScannerGetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerGet_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *HbaseScannerGetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
//  - Ia
type HbaseScannerGetResult struct {
	Success []*TRowResult_   `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError         `thrift:"io,1" db:"io" json:"io,omitempty"`
	Ia      *IllegalArgument `thrift:"ia,2" db:"ia" json:"ia,omitempty"`
}

func NewHbaseScannerGetResult() *HbaseScannerGetResult {
	return &HbaseScannerGetResult{}
}

var HbaseScannerGetResult_Success_DEFAULT []*TRowResult_

func (p *HbaseScannerGetResult) GetSuccess() []*TRowResult_ {
	return p.Success
}

var HbaseScannerGetResult_Io_DEFAULT *IOError

func (p *HbaseScannerGetResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseScannerGetResult_Io_DEFAULT
	}
	return p.Io
}

var HbaseScannerGetResult_Ia_DEFAULT *IllegalArgument

func (p *HbaseScannerGetResult) GetIa() *IllegalArgument {
	if !p.IsSetIa() {
		return HbaseScannerGetResult_Ia_DEFAULT
	}
	return p.Ia
}
func (p *HbaseScannerGetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseScannerGetResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseScannerGetResult) IsSetIa() bool {
	return p.Ia != nil
}

func (p *HbaseScannerGetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerGetResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRowResult_, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem183 := &TRowResult_{}
		if err := _elem183.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem183), err)
		}
		p.Success = append(p.Success, _elem183)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseScannerGetResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseScannerGetResult) ReadField2(iprot thrift.TProtocol) error {
	p.Ia = &IllegalArgument{}
	if err := p.Ia.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ia), err)
	}
	return nil
}

func (p *HbaseScannerGetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerGet_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerGetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerGetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerGetResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIa() {
		if err := oprot.WriteFieldBegin("ia", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ia: ", p), err)
		}
		if err := p.Ia.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ia), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ia: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerGetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerGetResult(%+v)", *p)
}

// Attributes:
//  - ID: id of a scanner returned by scannerOpen
//  - NbRows: number of results to return
type HbaseScannerGetListArgs struct {
	ID     ScannerID `thrift:"id,1" db:"id" json:"id"`
	NbRows int32     `thrift:"nbRows,2" db:"nbRows" json:"nbRows"`
}

func NewHbaseScannerGetListArgs() *HbaseScannerGetListArgs {
	return &HbaseScannerGetListArgs{}
}

func (p *HbaseScannerGetListArgs) GetID() ScannerID {
	return p.ID
}

func (p *HbaseScannerGetListArgs) GetNbRows() int32 {
	return p.NbRows
}
func (p *HbaseScannerGetListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerGetListArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ScannerID(v)
		p.ID = temp
	}
	return nil
}

func (p *HbaseScannerGetListArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NbRows = v
	}
	return nil
}

func (p *HbaseScannerGetListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerGetList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerGetListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *HbaseScannerGetListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nbRows", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nbRows: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NbRows)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nbRows (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nbRows: ", p), err)
	}
	return err
}

func (p *HbaseScannerGetListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerGetListArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
//  - Ia
type HbaseScannerGetListResult struct {
	Success []*TRowResult_   `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError         `thrift:"io,1" db:"io" json:"io,omitempty"`
	Ia      *IllegalArgument `thrift:"ia,2" db:"ia" json:"ia,omitempty"`
}

func NewHbaseScannerGetListResult() *HbaseScannerGetListResult {
	return &HbaseScannerGetListResult{}
}

var HbaseScannerGetListResult_Success_DEFAULT []*TRowResult_

func (p *HbaseScannerGetListResult) GetSuccess() []*TRowResult_ {
	return p.Success
}

var HbaseScannerGetListResult_Io_DEFAULT *IOError

func (p *HbaseScannerGetListResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseScannerGetListResult_Io_DEFAULT
	}
	return p.Io
}

var HbaseScannerGetListResult_Ia_DEFAULT *IllegalArgument

func (p *HbaseScannerGetListResult) GetIa() *IllegalArgument {
	if !p.IsSetIa() {
		return HbaseScannerGetListResult_Ia_DEFAULT
	}
	return p.Ia
}
func (p *HbaseScannerGetListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseScannerGetListResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseScannerGetListResult) IsSetIa() bool {
	return p.Ia != nil
}

func (p *HbaseScannerGetListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerGetListResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TRowResult_, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem184 := &TRowResult_{}
		if err := _elem184.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem184), err)
		}
		p.Success = append(p.Success, _elem184)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseScannerGetListResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseScannerGetListResult) ReadField2(iprot thrift.TProtocol) error {
	p.Ia = &IllegalArgument{}
	if err := p.Ia.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ia), err)
	}
	return nil
}

func (p *HbaseScannerGetListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerGetList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerGetListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerGetListResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerGetListResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIa() {
		if err := oprot.WriteFieldBegin("ia", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ia: ", p), err)
		}
		if err := p.Ia.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ia), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ia: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerGetListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerGetListResult(%+v)", *p)
}

// Attributes:
//  - ID: id of a scanner returned by scannerOpen
type HbaseScannerCloseArgs struct {
	ID ScannerID `thrift:"id,1" db:"id" json:"id"`
}

func NewHbaseScannerCloseArgs() *HbaseScannerCloseArgs {
	return &HbaseScannerCloseArgs{}
}

func (p *HbaseScannerCloseArgs) GetID() ScannerID {
	return p.ID
}
func (p *HbaseScannerCloseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerCloseArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ScannerID(v)
		p.ID = temp
	}
	return nil
}

func (p *HbaseScannerCloseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerClose_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerCloseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *HbaseScannerCloseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerCloseArgs(%+v)", *p)
}

// Attributes:
//  - Io
//  - Ia
type HbaseScannerCloseResult struct {
	Io *IOError         `thrift:"io,1" db:"io" json:"io,omitempty"`
	Ia *IllegalArgument `thrift:"ia,2" db:"ia" json:"ia,omitempty"`
}

func NewHbaseScannerCloseResult() *HbaseScannerCloseResult {
	return &HbaseScannerCloseResult{}
}

var HbaseScannerCloseResult_Io_DEFAULT *IOError

func (p *HbaseScannerCloseResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseScannerCloseResult_Io_DEFAULT
	}
	return p.Io
}

var HbaseScannerCloseResult_Ia_DEFAULT *IllegalArgument

func (p *HbaseScannerCloseResult) GetIa() *IllegalArgument {
	if !p.IsSetIa() {
		return HbaseScannerCloseResult_Ia_DEFAULT
	}
	return p.Ia
}
func (p *HbaseScannerCloseResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseScannerCloseResult) IsSetIa() bool {
	return p.Ia != nil
}

func (p *HbaseScannerCloseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseScannerCloseResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseScannerCloseResult) ReadField2(iprot thrift.TProtocol) error {
	p.Ia = &IllegalArgument{}
	if err := p.Ia.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ia), err)
	}
	return nil
}

func (p *HbaseScannerCloseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scannerClose_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseScannerCloseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerCloseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIa() {
		if err := oprot.WriteFieldBegin("ia", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ia: ", p), err)
		}
		if err := p.Ia.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ia), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ia: ", p), err)
		}
	}
	return err
}

func (p *HbaseScannerCloseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseScannerCloseResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: row key
//  - Family: column name
type HbaseGetRowOrBeforeArgs struct {
	TableName Text `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row       Text `thrift:"row,2" db:"row" json:"row"`
	Family    Text `thrift:"family,3" db:"family" json:"family"`
}

func NewHbaseGetRowOrBeforeArgs() *HbaseGetRowOrBeforeArgs {
	return &HbaseGetRowOrBeforeArgs{}
}

func (p *HbaseGetRowOrBeforeArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseGetRowOrBeforeArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseGetRowOrBeforeArgs) GetFamily() Text {
	return p.Family
}
func (p *HbaseGetRowOrBeforeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowOrBeforeArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseGetRowOrBeforeArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseGetRowOrBeforeArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Text(v)
		p.Family = temp
	}
	return nil
}

func (p *HbaseGetRowOrBeforeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowOrBefore_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowOrBeforeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseGetRowOrBeforeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseGetRowOrBeforeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("family", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:family: ", p), err)
	}
	if err := oprot.WriteBinary(p.Family); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.family (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:family: ", p), err)
	}
	return err
}

func (p *HbaseGetRowOrBeforeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowOrBeforeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetRowOrBeforeResult struct {
	Success []*TCell `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetRowOrBeforeResult() *HbaseGetRowOrBeforeResult {
	return &HbaseGetRowOrBeforeResult{}
}

var HbaseGetRowOrBeforeResult_Success_DEFAULT []*TCell

func (p *HbaseGetRowOrBeforeResult) GetSuccess() []*TCell {
	return p.Success
}

var HbaseGetRowOrBeforeResult_Io_DEFAULT *IOError

func (p *HbaseGetRowOrBeforeResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetRowOrBeforeResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetRowOrBeforeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetRowOrBeforeResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetRowOrBeforeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRowOrBeforeResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TCell, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem185 := &TCell{}
		if err := _elem185.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem185), err)
		}
		p.Success = append(p.Success, _elem185)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseGetRowOrBeforeResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetRowOrBeforeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowOrBefore_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRowOrBeforeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowOrBeforeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRowOrBeforeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRowOrBeforeResult(%+v)", *p)
}

// Attributes:
//  - Row: row key
type HbaseGetRegionInfoArgs struct {
	Row Text `thrift:"row,1" db:"row" json:"row"`
}

func NewHbaseGetRegionInfoArgs() *HbaseGetRegionInfoArgs {
	return &HbaseGetRegionInfoArgs{}
}

func (p *HbaseGetRegionInfoArgs) GetRow() Text {
	return p.Row
}
func (p *HbaseGetRegionInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRegionInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseGetRegionInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRegionInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRegionInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row: ", p), err)
	}
	return err
}

func (p *HbaseGetRegionInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRegionInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseGetRegionInfoResult struct {
	Success *TRegionInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError     `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseGetRegionInfoResult() *HbaseGetRegionInfoResult {
	return &HbaseGetRegionInfoResult{}
}

var HbaseGetRegionInfoResult_Success_DEFAULT *TRegionInfo

func (p *HbaseGetRegionInfoResult) GetSuccess() *TRegionInfo {
	if !p.IsSetSuccess() {
		return HbaseGetRegionInfoResult_Success_DEFAULT
	}
	return p.Success
}

var HbaseGetRegionInfoResult_Io_DEFAULT *IOError

func (p *HbaseGetRegionInfoResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseGetRegionInfoResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseGetRegionInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseGetRegionInfoResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseGetRegionInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseGetRegionInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TRegionInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HbaseGetRegionInfoResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseGetRegionInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRegionInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseGetRegionInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRegionInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseGetRegionInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseGetRegionInfoResult(%+v)", *p)
}

// Attributes:
//  - Append: The single append operation to apply
type HbaseAppendArgs struct {
	Append *TAppend `thrift:"append,1" db:"append" json:"append"`
}

func NewHbaseAppendArgs() *HbaseAppendArgs {
	return &HbaseAppendArgs{}
}

var HbaseAppendArgs_Append_DEFAULT *TAppend

func (p *HbaseAppendArgs) GetAppend() *TAppend {
	if !p.IsSetAppend() {
		return HbaseAppendArgs_Append_DEFAULT
	}
	return p.Append
}
func (p *HbaseAppendArgs) IsSetAppend() bool {
	return p.Append != nil
}

func (p *HbaseAppendArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseAppendArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Append = &TAppend{}
	if err := p.Append.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Append), err)
	}
	return nil
}

func (p *HbaseAppendArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseAppendArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("append", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:append: ", p), err)
	}
	if err := p.Append.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Append), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:append: ", p), err)
	}
	return err
}

func (p *HbaseAppendArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseAppendArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
type HbaseAppendResult struct {
	Success []*TCell `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError `thrift:"io,1" db:"io" json:"io,omitempty"`
}

func NewHbaseAppendResult() *HbaseAppendResult {
	return &HbaseAppendResult{}
}

var HbaseAppendResult_Success_DEFAULT []*TCell

func (p *HbaseAppendResult) GetSuccess() []*TCell {
	return p.Success
}

var HbaseAppendResult_Io_DEFAULT *IOError

func (p *HbaseAppendResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseAppendResult_Io_DEFAULT
	}
	return p.Io
}
func (p *HbaseAppendResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseAppendResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseAppendResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseAppendResult) ReadField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TCell, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem186 := &TCell{}
		if err := _elem186.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem186), err)
		}
		p.Success = append(p.Success, _elem186)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HbaseAppendResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseAppendResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("append_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseAppendResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseAppendResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseAppendResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseAppendResult(%+v)", *p)
}

// Attributes:
//  - TableName: name of table
//  - Row: row key
//  - Column: column name
//  - Value: the expected value for the column parameter, if not
// provided the check is for the non-existence of the
// column in question
//  - Mput: mutation for the put
//  - Attributes: Mutation attributes
type HbaseCheckAndPutArgs struct {
	TableName Text `thrift:"tableName,1" db:"tableName" json:"tableName"`
	Row       Text `thrift:"row,2" db:"row" json:"row"`
	Column    Text `thrift:"column,3" db:"column" json:"column"`
	// unused field # 4
	Value      Text            `thrift:"value,5" db:"value" json:"value"`
	Mput       *Mutation       `thrift:"mput,6" db:"mput" json:"mput"`
	Attributes map[string]Text `thrift:"attributes,7" db:"attributes" json:"attributes"`
}

func NewHbaseCheckAndPutArgs() *HbaseCheckAndPutArgs {
	return &HbaseCheckAndPutArgs{}
}

func (p *HbaseCheckAndPutArgs) GetTableName() Text {
	return p.TableName
}

func (p *HbaseCheckAndPutArgs) GetRow() Text {
	return p.Row
}

func (p *HbaseCheckAndPutArgs) GetColumn() Text {
	return p.Column
}

func (p *HbaseCheckAndPutArgs) GetValue() Text {
	return p.Value
}

var HbaseCheckAndPutArgs_Mput_DEFAULT *Mutation

func (p *HbaseCheckAndPutArgs) GetMput() *Mutation {
	if !p.IsSetMput() {
		return HbaseCheckAndPutArgs_Mput_DEFAULT
	}
	return p.Mput
}

func (p *HbaseCheckAndPutArgs) GetAttributes() map[string]Text {
	return p.Attributes
}
func (p *HbaseCheckAndPutArgs) IsSetMput() bool {
	return p.Mput != nil
}

func (p *HbaseCheckAndPutArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseCheckAndPutArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Text(v)
		p.TableName = temp
	}
	return nil
}

func (p *HbaseCheckAndPutArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Text(v)
		p.Row = temp
	}
	return nil
}

func (p *HbaseCheckAndPutArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Text(v)
		p.Column = temp
	}
	return nil
}

func (p *HbaseCheckAndPutArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := Text(v)
		p.Value = temp
	}
	return nil
}

func (p *HbaseCheckAndPutArgs) ReadField6(iprot thrift.TProtocol) error {
	p.Mput = &Mutation{
		WriteToWAL: true,
	}
	if err := p.Mput.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mput), err)
	}
	return nil
}

func (p *HbaseCheckAndPutArgs) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]Text, size)
	p.Attributes = tMap
	for i := 0; i < size; i++ {
		var _key187 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_key187 = string(temp)
		}
		var _val188 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Text(v)
			_val188 = temp
		}
		p.Attributes[_key187] = _val188
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *HbaseCheckAndPutArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkAndPut_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseCheckAndPutArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableName: ", p), err)
	}
	if err := oprot.WriteBinary(p.TableName); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableName: ", p), err)
	}
	return err
}

func (p *HbaseCheckAndPutArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:row: ", p), err)
	}
	return err
}

func (p *HbaseCheckAndPutArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:column: ", p), err)
	}
	if err := oprot.WriteBinary(p.Column); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.column (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:column: ", p), err)
	}
	return err
}

func (p *HbaseCheckAndPutArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:value: ", p), err)
	}
	if err := oprot.WriteBinary(p.Value); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:value: ", p), err)
	}
	return err
}

func (p *HbaseCheckAndPutArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mput", thrift.STRUCT, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mput: ", p), err)
	}
	if err := p.Mput.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mput), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mput: ", p), err)
	}
	return err
}

func (p *HbaseCheckAndPutArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:attributes: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Attributes {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:attributes: ", p), err)
	}
	return err
}

func (p *HbaseCheckAndPutArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseCheckAndPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Io
//  - Ia
type HbaseCheckAndPutResult struct {
	Success *bool            `thrift:"success,0" db:"success" json:"success,omitempty"`
	Io      *IOError         `thrift:"io,1" db:"io" json:"io,omitempty"`
	Ia      *IllegalArgument `thrift:"ia,2" db:"ia" json:"ia,omitempty"`
}

func NewHbaseCheckAndPutResult() *HbaseCheckAndPutResult {
	return &HbaseCheckAndPutResult{}
}

var HbaseCheckAndPutResult_Success_DEFAULT bool

func (p *HbaseCheckAndPutResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return HbaseCheckAndPutResult_Success_DEFAULT
	}
	return *p.Success
}

var HbaseCheckAndPutResult_Io_DEFAULT *IOError

func (p *HbaseCheckAndPutResult) GetIo() *IOError {
	if !p.IsSetIo() {
		return HbaseCheckAndPutResult_Io_DEFAULT
	}
	return p.Io
}

var HbaseCheckAndPutResult_Ia_DEFAULT *IllegalArgument

func (p *HbaseCheckAndPutResult) GetIa() *IllegalArgument {
	if !p.IsSetIa() {
		return HbaseCheckAndPutResult_Ia_DEFAULT
	}
	return p.Ia
}
func (p *HbaseCheckAndPutResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HbaseCheckAndPutResult) IsSetIo() bool {
	return p.Io != nil
}

func (p *HbaseCheckAndPutResult) IsSetIa() bool {
	return p.Ia != nil
}

func (p *HbaseCheckAndPutResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField0(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HbaseCheckAndPutResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *HbaseCheckAndPutResult) ReadField1(iprot thrift.TProtocol) error {
	p.Io = &IOError{}
	if err := p.Io.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Io), err)
	}
	return nil
}

func (p *HbaseCheckAndPutResult) ReadField2(iprot thrift.TProtocol) error {
	p.Ia = &IllegalArgument{}
	if err := p.Ia.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ia), err)
	}
	return nil
}

func (p *HbaseCheckAndPutResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkAndPut_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HbaseCheckAndPutResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HbaseCheckAndPutResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIo() {
		if err := oprot.WriteFieldBegin("io", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:io: ", p), err)
		}
		if err := p.Io.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Io), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:io: ", p), err)
		}
	}
	return err
}

func (p *HbaseCheckAndPutResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIa() {
		if err := oprot.WriteFieldBegin("ia", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ia: ", p), err)
		}
		if err := p.Ia.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ia), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ia: ", p), err)
		}
	}
	return err
}

func (p *HbaseCheckAndPutResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HbaseCheckAndPutResult(%+v)", *p)
}
